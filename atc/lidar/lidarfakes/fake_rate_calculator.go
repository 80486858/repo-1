// Code generated by counterfeiter. DO NOT EDIT.
package lidarfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/lidar"
	"golang.org/x/time/rate"
)

type FakeRateCalculator struct {
	RateLimitStub        func() (rate.Limit, error)
	rateLimitMutex       sync.RWMutex
	rateLimitArgsForCall []struct {
	}
	rateLimitReturns struct {
		result1 rate.Limit
		result2 error
	}
	rateLimitReturnsOnCall map[int]struct {
		result1 rate.Limit
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRateCalculator) RateLimit() (rate.Limit, error) {
	fake.rateLimitMutex.Lock()
	ret, specificReturn := fake.rateLimitReturnsOnCall[len(fake.rateLimitArgsForCall)]
	fake.rateLimitArgsForCall = append(fake.rateLimitArgsForCall, struct {
	}{})
	fake.recordInvocation("RateLimit", []interface{}{})
	fake.rateLimitMutex.Unlock()
	if fake.RateLimitStub != nil {
		return fake.RateLimitStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rateLimitReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRateCalculator) RateLimitCallCount() int {
	fake.rateLimitMutex.RLock()
	defer fake.rateLimitMutex.RUnlock()
	return len(fake.rateLimitArgsForCall)
}

func (fake *FakeRateCalculator) RateLimitCalls(stub func() (rate.Limit, error)) {
	fake.rateLimitMutex.Lock()
	defer fake.rateLimitMutex.Unlock()
	fake.RateLimitStub = stub
}

func (fake *FakeRateCalculator) RateLimitReturns(result1 rate.Limit, result2 error) {
	fake.rateLimitMutex.Lock()
	defer fake.rateLimitMutex.Unlock()
	fake.RateLimitStub = nil
	fake.rateLimitReturns = struct {
		result1 rate.Limit
		result2 error
	}{result1, result2}
}

func (fake *FakeRateCalculator) RateLimitReturnsOnCall(i int, result1 rate.Limit, result2 error) {
	fake.rateLimitMutex.Lock()
	defer fake.rateLimitMutex.Unlock()
	fake.RateLimitStub = nil
	if fake.rateLimitReturnsOnCall == nil {
		fake.rateLimitReturnsOnCall = make(map[int]struct {
			result1 rate.Limit
			result2 error
		})
	}
	fake.rateLimitReturnsOnCall[i] = struct {
		result1 rate.Limit
		result2 error
	}{result1, result2}
}

func (fake *FakeRateCalculator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rateLimitMutex.RLock()
	defer fake.rateLimitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRateCalculator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lidar.RateCalculator = new(FakeRateCalculator)
