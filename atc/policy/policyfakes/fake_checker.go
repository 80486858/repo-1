// Code generated by counterfeiter. DO NOT EDIT.
package policyfakes

import (
	"net/http"
	"sync"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/api/accessor"
	"github.com/concourse/concourse/atc/policy"
)

type FakeChecker struct {
	CheckHttpApiStub        func(string, accessor.Access, *http.Request) (bool, error)
	checkHttpApiMutex       sync.RWMutex
	checkHttpApiArgsForCall []struct {
		arg1 string
		arg2 accessor.Access
		arg3 *http.Request
	}
	checkHttpApiReturns struct {
		result1 bool
		result2 error
	}
	checkHttpApiReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CheckUsingImageStub        func(string, string, string, atc.Source) (bool, error)
	checkUsingImageMutex       sync.RWMutex
	checkUsingImageArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 atc.Source
	}
	checkUsingImageReturns struct {
		result1 bool
		result2 error
	}
	checkUsingImageReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChecker) CheckHttpApi(arg1 string, arg2 accessor.Access, arg3 *http.Request) (bool, error) {
	fake.checkHttpApiMutex.Lock()
	ret, specificReturn := fake.checkHttpApiReturnsOnCall[len(fake.checkHttpApiArgsForCall)]
	fake.checkHttpApiArgsForCall = append(fake.checkHttpApiArgsForCall, struct {
		arg1 string
		arg2 accessor.Access
		arg3 *http.Request
	}{arg1, arg2, arg3})
	fake.recordInvocation("CheckHttpApi", []interface{}{arg1, arg2, arg3})
	fake.checkHttpApiMutex.Unlock()
	if fake.CheckHttpApiStub != nil {
		return fake.CheckHttpApiStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkHttpApiReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChecker) CheckHttpApiCallCount() int {
	fake.checkHttpApiMutex.RLock()
	defer fake.checkHttpApiMutex.RUnlock()
	return len(fake.checkHttpApiArgsForCall)
}

func (fake *FakeChecker) CheckHttpApiCalls(stub func(string, accessor.Access, *http.Request) (bool, error)) {
	fake.checkHttpApiMutex.Lock()
	defer fake.checkHttpApiMutex.Unlock()
	fake.CheckHttpApiStub = stub
}

func (fake *FakeChecker) CheckHttpApiArgsForCall(i int) (string, accessor.Access, *http.Request) {
	fake.checkHttpApiMutex.RLock()
	defer fake.checkHttpApiMutex.RUnlock()
	argsForCall := fake.checkHttpApiArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeChecker) CheckHttpApiReturns(result1 bool, result2 error) {
	fake.checkHttpApiMutex.Lock()
	defer fake.checkHttpApiMutex.Unlock()
	fake.CheckHttpApiStub = nil
	fake.checkHttpApiReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChecker) CheckHttpApiReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkHttpApiMutex.Lock()
	defer fake.checkHttpApiMutex.Unlock()
	fake.CheckHttpApiStub = nil
	if fake.checkHttpApiReturnsOnCall == nil {
		fake.checkHttpApiReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkHttpApiReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChecker) CheckUsingImage(arg1 string, arg2 string, arg3 string, arg4 atc.Source) (bool, error) {
	fake.checkUsingImageMutex.Lock()
	ret, specificReturn := fake.checkUsingImageReturnsOnCall[len(fake.checkUsingImageArgsForCall)]
	fake.checkUsingImageArgsForCall = append(fake.checkUsingImageArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 atc.Source
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CheckUsingImage", []interface{}{arg1, arg2, arg3, arg4})
	fake.checkUsingImageMutex.Unlock()
	if fake.CheckUsingImageStub != nil {
		return fake.CheckUsingImageStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkUsingImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChecker) CheckUsingImageCallCount() int {
	fake.checkUsingImageMutex.RLock()
	defer fake.checkUsingImageMutex.RUnlock()
	return len(fake.checkUsingImageArgsForCall)
}

func (fake *FakeChecker) CheckUsingImageCalls(stub func(string, string, string, atc.Source) (bool, error)) {
	fake.checkUsingImageMutex.Lock()
	defer fake.checkUsingImageMutex.Unlock()
	fake.CheckUsingImageStub = stub
}

func (fake *FakeChecker) CheckUsingImageArgsForCall(i int) (string, string, string, atc.Source) {
	fake.checkUsingImageMutex.RLock()
	defer fake.checkUsingImageMutex.RUnlock()
	argsForCall := fake.checkUsingImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeChecker) CheckUsingImageReturns(result1 bool, result2 error) {
	fake.checkUsingImageMutex.Lock()
	defer fake.checkUsingImageMutex.Unlock()
	fake.CheckUsingImageStub = nil
	fake.checkUsingImageReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChecker) CheckUsingImageReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkUsingImageMutex.Lock()
	defer fake.checkUsingImageMutex.Unlock()
	fake.CheckUsingImageStub = nil
	if fake.checkUsingImageReturnsOnCall == nil {
		fake.checkUsingImageReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkUsingImageReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkHttpApiMutex.RLock()
	defer fake.checkHttpApiMutex.RUnlock()
	fake.checkUsingImageMutex.RLock()
	defer fake.checkUsingImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ policy.Checker = new(FakeChecker)
