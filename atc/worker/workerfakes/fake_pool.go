// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	db "github.com/concourse/concourse/atc/db"
	worker "github.com/concourse/concourse/atc/worker"
)

type FakePool struct {
	FindContainerByHandleStub        func(lager.Logger, int, string) (worker.Container, bool, error)
	findContainerByHandleMutex       sync.RWMutex
	findContainerByHandleArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}
	findContainerByHandleReturns struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	findContainerByHandleReturnsOnCall map[int]struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	FindOrChooseWorkerStub        func(lager.Logger, db.ContainerOwner, db.ContainerMetadata, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy) (worker.Worker, error)
	findOrChooseWorkerMutex       sync.RWMutex
	findOrChooseWorkerArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
		arg3 db.ContainerMetadata
		arg4 worker.ContainerSpec
		arg5 worker.WorkerSpec
		arg6 worker.ContainerPlacementStrategy
	}
	findOrChooseWorkerReturns struct {
		result1 worker.Worker
		result2 error
	}
	findOrChooseWorkerReturnsOnCall map[int]struct {
		result1 worker.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePool) FindContainerByHandle(arg1 lager.Logger, arg2 int, arg3 string) (worker.Container, bool, error) {
	fake.findContainerByHandleMutex.Lock()
	ret, specificReturn := fake.findContainerByHandleReturnsOnCall[len(fake.findContainerByHandleArgsForCall)]
	fake.findContainerByHandleArgsForCall = append(fake.findContainerByHandleArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindContainerByHandle", []interface{}{arg1, arg2, arg3})
	fake.findContainerByHandleMutex.Unlock()
	if fake.FindContainerByHandleStub != nil {
		return fake.FindContainerByHandleStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findContainerByHandleReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePool) FindContainerByHandleCallCount() int {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return len(fake.findContainerByHandleArgsForCall)
}

func (fake *FakePool) FindContainerByHandleCalls(stub func(lager.Logger, int, string) (worker.Container, bool, error)) {
	fake.findContainerByHandleMutex.Lock()
	defer fake.findContainerByHandleMutex.Unlock()
	fake.FindContainerByHandleStub = stub
}

func (fake *FakePool) FindContainerByHandleArgsForCall(i int) (lager.Logger, int, string) {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	argsForCall := fake.findContainerByHandleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePool) FindContainerByHandleReturns(result1 worker.Container, result2 bool, result3 error) {
	fake.findContainerByHandleMutex.Lock()
	defer fake.findContainerByHandleMutex.Unlock()
	fake.FindContainerByHandleStub = nil
	fake.findContainerByHandleReturns = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) FindContainerByHandleReturnsOnCall(i int, result1 worker.Container, result2 bool, result3 error) {
	fake.findContainerByHandleMutex.Lock()
	defer fake.findContainerByHandleMutex.Unlock()
	fake.FindContainerByHandleStub = nil
	if fake.findContainerByHandleReturnsOnCall == nil {
		fake.findContainerByHandleReturnsOnCall = make(map[int]struct {
			result1 worker.Container
			result2 bool
			result3 error
		})
	}
	fake.findContainerByHandleReturnsOnCall[i] = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) FindOrChooseWorker(arg1 lager.Logger, arg2 db.ContainerOwner, arg3 db.ContainerMetadata, arg4 worker.ContainerSpec, arg5 worker.WorkerSpec, arg6 worker.ContainerPlacementStrategy) (worker.Worker, error) {
	fake.findOrChooseWorkerMutex.Lock()
	ret, specificReturn := fake.findOrChooseWorkerReturnsOnCall[len(fake.findOrChooseWorkerArgsForCall)]
	fake.findOrChooseWorkerArgsForCall = append(fake.findOrChooseWorkerArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
		arg3 db.ContainerMetadata
		arg4 worker.ContainerSpec
		arg5 worker.WorkerSpec
		arg6 worker.ContainerPlacementStrategy
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("FindOrChooseWorker", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.findOrChooseWorkerMutex.Unlock()
	if fake.FindOrChooseWorkerStub != nil {
		return fake.FindOrChooseWorkerStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrChooseWorkerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePool) FindOrChooseWorkerCallCount() int {
	fake.findOrChooseWorkerMutex.RLock()
	defer fake.findOrChooseWorkerMutex.RUnlock()
	return len(fake.findOrChooseWorkerArgsForCall)
}

func (fake *FakePool) FindOrChooseWorkerCalls(stub func(lager.Logger, db.ContainerOwner, db.ContainerMetadata, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy) (worker.Worker, error)) {
	fake.findOrChooseWorkerMutex.Lock()
	defer fake.findOrChooseWorkerMutex.Unlock()
	fake.FindOrChooseWorkerStub = stub
}

func (fake *FakePool) FindOrChooseWorkerArgsForCall(i int) (lager.Logger, db.ContainerOwner, db.ContainerMetadata, worker.ContainerSpec, worker.WorkerSpec, worker.ContainerPlacementStrategy) {
	fake.findOrChooseWorkerMutex.RLock()
	defer fake.findOrChooseWorkerMutex.RUnlock()
	argsForCall := fake.findOrChooseWorkerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakePool) FindOrChooseWorkerReturns(result1 worker.Worker, result2 error) {
	fake.findOrChooseWorkerMutex.Lock()
	defer fake.findOrChooseWorkerMutex.Unlock()
	fake.FindOrChooseWorkerStub = nil
	fake.findOrChooseWorkerReturns = struct {
		result1 worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakePool) FindOrChooseWorkerReturnsOnCall(i int, result1 worker.Worker, result2 error) {
	fake.findOrChooseWorkerMutex.Lock()
	defer fake.findOrChooseWorkerMutex.Unlock()
	fake.FindOrChooseWorkerStub = nil
	if fake.findOrChooseWorkerReturnsOnCall == nil {
		fake.findOrChooseWorkerReturnsOnCall = make(map[int]struct {
			result1 worker.Worker
			result2 error
		})
	}
	fake.findOrChooseWorkerReturnsOnCall[i] = struct {
		result1 worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakePool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	fake.findOrChooseWorkerMutex.RLock()
	defer fake.findOrChooseWorkerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.Pool = new(FakePool)
