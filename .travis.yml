language: python
sudo: required
dist: bionic

# install dependencies
install:
  # Only add the --pre flag if $PRE_RELEASES is specified to test pre-releases
  # of dependencies, and only pin kubernetes if $KUBE_PY is specified.
  - pip install --upgrade setuptools pip
  - pip install -e ".[test]" ${PRE_RELEASES:+--pre} ${KUBE_PY:+kubernetes==${KUBE_PY}}

  # Allow for testing against the jupyterhub master branch as well
  - |
      if [ "$JUPYTERHUB_MASTER" == "TRUE" ]; then
        pip install https://github.com/jupyterhub/jupyterhub/archive/master.zip
      fi
  
  # Log installed python packages' versions
  - pip freeze

# run tests
script:
  # flake8 runs a very quick code analysis
  # without running any of the code it analyses
  - flake8 kubespawner
  # install kubectl, minikube and start minikube
  - source ci/minikube.env
  - ./ci/install-kube.sh
  - pytest --cov kubespawner -v

# followup
after_success:
  - pip install codecov
  - codecov

matrix:
  # NOTE: We may end up updating these set versions with time, when doing that,
  # these links are relevant.
  #
  # ref: KUBE_VERSION's valid values
  #      https://github.com/kubernetes/kubernetes/tags
  # ref: KUBE_PY's valid values
  #      https://github.com/kubernetes-client/python#compatibility
  include:
    # Test the oldest supported python on
    # the latest supported kubernetes-client,
    # and use the latest supported kubernetes
    # version along for the kubernetes-client.
    #
    # KUBE_PY represent the version of kubernetes-client/python, and client
    # version 8 supports k8s API version 1.12, and version 9 supports k8s API
    # version 1.13 and so on.

    - name: client:9,k8s:1.13
      env: KUBE_PY=9 KUBE_VERSION=1.13.12
      python: 3.8
      dist: xenial
      # NOTE: TravisCI's linux kernel, has since 2020 or so, when specifying
      #       bionic as a distribution, made minikube fail to start a k8s 1.13
      #       cluster. This is why we use xenial here.
      # Reference - a build failure with bionic:
      #       https://travis-ci.org/jupyterhub/kubespawner/jobs/642305915

    - name: client:10,k8s:1.14
      env: KUBE_PY=10 KUBE_VERSION=1.14.0
      python: 3.7

    - name: client:11,k8s:1.15
      env: &latest_supported KUBE_PY=11 KUBE_VERSION=1.15.12
      python: 3.6

    - name: client:11,k8s:1.15,jupyterhub:master
      env: KUBE_PY=11 KUBE_VERSION=1.15.12 JUPYTERHUB_MASTER=TRUE
      python: 3.8
      
    - name: client:11,k8s:1.18
      env: KUBE_PY=11 KUBE_VERSION=1.18.9
      python: 3.8
      before_install:
        # This is required by k8s 1.18 according to minikube error message
        # trying to install k8s 1.18 without it.
        - sudo apt-get -q -y install conntrack
    # Allowed failure tests:
    # ----------------------

    # 1. Test with pre-releases of kubernetes-client/python and other
    #    python dependencies
    - &allowed_failure_1
      name: client:pre-release,k8s:1.16
      python: 3.8
      env: PRE_RELEASES=TRUE KUBE_VERSION=1.16.13

    # 2. Test with a nightly python build using latest known
    #    supported configuration.
    - &allowed_failure_2
      name: client:11,k8s:1.15,python:nightly
      python: nightly
      env: *latest_supported

    # Only deploy if all test jobs passed
    - stage: deploy
      if: tag IS present
      python: 3.7
      # FIXME: We don't want to run tests again here, but I got
      # the following issue when these were commented out...
      # https://travis-ci.org/mapbox/vtvalidate/jobs/492280599
      #script: []
      #after_success: []
      deploy:
        provider: pypi
        user: __token__
        # password: set by TravisCI's environment variable PYPI_PASSWORD
        # ref: https://travis-ci.org/jupyterhub/kubespawner/settings
        distributions: sdist bdist_wheel
        on:
          # Without this we get the note about:
          # Skipping a deployment with the pypi provider because this branch is not permitted: <tag>
          tags: true

  allow_failures:
    - *allowed_failure_1
    - *allowed_failure_2
  fast_finish: true
