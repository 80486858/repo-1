// Code generated by counterfeiter. DO NOT EDIT.
package backendfakes

import (
	"context"
	"sync"

	"github.com/concourse/concourse/worker/backend"
	"github.com/containerd/containerd"
)

type FakeContainerStopper struct {
	GracefullyStopStub        func(context.Context, containerd.Container) error
	gracefullyStopMutex       sync.RWMutex
	gracefullyStopArgsForCall []struct {
		arg1 context.Context
		arg2 containerd.Container
	}
	gracefullyStopReturns struct {
		result1 error
	}
	gracefullyStopReturnsOnCall map[int]struct {
		result1 error
	}
	UngracefullyStopStub        func(context.Context, containerd.Container) error
	ungracefullyStopMutex       sync.RWMutex
	ungracefullyStopArgsForCall []struct {
		arg1 context.Context
		arg2 containerd.Container
	}
	ungracefullyStopReturns struct {
		result1 error
	}
	ungracefullyStopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerStopper) GracefullyStop(arg1 context.Context, arg2 containerd.Container) error {
	fake.gracefullyStopMutex.Lock()
	ret, specificReturn := fake.gracefullyStopReturnsOnCall[len(fake.gracefullyStopArgsForCall)]
	fake.gracefullyStopArgsForCall = append(fake.gracefullyStopArgsForCall, struct {
		arg1 context.Context
		arg2 containerd.Container
	}{arg1, arg2})
	fake.recordInvocation("GracefullyStop", []interface{}{arg1, arg2})
	fake.gracefullyStopMutex.Unlock()
	if fake.GracefullyStopStub != nil {
		return fake.GracefullyStopStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.gracefullyStopReturns
	return fakeReturns.result1
}

func (fake *FakeContainerStopper) GracefullyStopCallCount() int {
	fake.gracefullyStopMutex.RLock()
	defer fake.gracefullyStopMutex.RUnlock()
	return len(fake.gracefullyStopArgsForCall)
}

func (fake *FakeContainerStopper) GracefullyStopCalls(stub func(context.Context, containerd.Container) error) {
	fake.gracefullyStopMutex.Lock()
	defer fake.gracefullyStopMutex.Unlock()
	fake.GracefullyStopStub = stub
}

func (fake *FakeContainerStopper) GracefullyStopArgsForCall(i int) (context.Context, containerd.Container) {
	fake.gracefullyStopMutex.RLock()
	defer fake.gracefullyStopMutex.RUnlock()
	argsForCall := fake.gracefullyStopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerStopper) GracefullyStopReturns(result1 error) {
	fake.gracefullyStopMutex.Lock()
	defer fake.gracefullyStopMutex.Unlock()
	fake.GracefullyStopStub = nil
	fake.gracefullyStopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerStopper) GracefullyStopReturnsOnCall(i int, result1 error) {
	fake.gracefullyStopMutex.Lock()
	defer fake.gracefullyStopMutex.Unlock()
	fake.GracefullyStopStub = nil
	if fake.gracefullyStopReturnsOnCall == nil {
		fake.gracefullyStopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.gracefullyStopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerStopper) UngracefullyStop(arg1 context.Context, arg2 containerd.Container) error {
	fake.ungracefullyStopMutex.Lock()
	ret, specificReturn := fake.ungracefullyStopReturnsOnCall[len(fake.ungracefullyStopArgsForCall)]
	fake.ungracefullyStopArgsForCall = append(fake.ungracefullyStopArgsForCall, struct {
		arg1 context.Context
		arg2 containerd.Container
	}{arg1, arg2})
	fake.recordInvocation("UngracefullyStop", []interface{}{arg1, arg2})
	fake.ungracefullyStopMutex.Unlock()
	if fake.UngracefullyStopStub != nil {
		return fake.UngracefullyStopStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ungracefullyStopReturns
	return fakeReturns.result1
}

func (fake *FakeContainerStopper) UngracefullyStopCallCount() int {
	fake.ungracefullyStopMutex.RLock()
	defer fake.ungracefullyStopMutex.RUnlock()
	return len(fake.ungracefullyStopArgsForCall)
}

func (fake *FakeContainerStopper) UngracefullyStopCalls(stub func(context.Context, containerd.Container) error) {
	fake.ungracefullyStopMutex.Lock()
	defer fake.ungracefullyStopMutex.Unlock()
	fake.UngracefullyStopStub = stub
}

func (fake *FakeContainerStopper) UngracefullyStopArgsForCall(i int) (context.Context, containerd.Container) {
	fake.ungracefullyStopMutex.RLock()
	defer fake.ungracefullyStopMutex.RUnlock()
	argsForCall := fake.ungracefullyStopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainerStopper) UngracefullyStopReturns(result1 error) {
	fake.ungracefullyStopMutex.Lock()
	defer fake.ungracefullyStopMutex.Unlock()
	fake.UngracefullyStopStub = nil
	fake.ungracefullyStopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerStopper) UngracefullyStopReturnsOnCall(i int, result1 error) {
	fake.ungracefullyStopMutex.Lock()
	defer fake.ungracefullyStopMutex.Unlock()
	fake.UngracefullyStopStub = nil
	if fake.ungracefullyStopReturnsOnCall == nil {
		fake.ungracefullyStopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ungracefullyStopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerStopper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gracefullyStopMutex.RLock()
	defer fake.gracefullyStopMutex.RUnlock()
	fake.ungracefullyStopMutex.RLock()
	defer fake.ungracefullyStopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerStopper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.ContainerStopper = new(FakeContainerStopper)
