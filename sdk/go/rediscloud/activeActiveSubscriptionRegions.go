// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveActiveSubscriptionRegions struct {
	pulumi.CustomResourceState

	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions pulumi.BoolPtrOutput `pulumi:"deleteRegions"`
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Regions ActiveActiveSubscriptionRegionsRegionArrayOutput `pulumi:"regions"`
	// ID of the subscription that the regions belong to
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewActiveActiveSubscriptionRegions registers a new resource with the given unique name, arguments, and options.
func NewActiveActiveSubscriptionRegions(ctx *pulumi.Context,
	name string, args *ActiveActiveSubscriptionRegionsArgs, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionRegions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	var resource ActiveActiveSubscriptionRegions
	err := ctx.RegisterResource("rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveActiveSubscriptionRegions gets an existing ActiveActiveSubscriptionRegions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveActiveSubscriptionRegions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveActiveSubscriptionRegionsState, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionRegions, error) {
	var resource ActiveActiveSubscriptionRegions
	err := ctx.ReadResource("rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveActiveSubscriptionRegions resources.
type activeActiveSubscriptionRegionsState struct {
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions *bool `pulumi:"deleteRegions"`
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Regions []ActiveActiveSubscriptionRegionsRegion `pulumi:"regions"`
	// ID of the subscription that the regions belong to
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type ActiveActiveSubscriptionRegionsState struct {
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions pulumi.BoolPtrInput
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Regions ActiveActiveSubscriptionRegionsRegionArrayInput
	// ID of the subscription that the regions belong to
	SubscriptionId pulumi.StringPtrInput
}

func (ActiveActiveSubscriptionRegionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionRegionsState)(nil)).Elem()
}

type activeActiveSubscriptionRegionsArgs struct {
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions *bool `pulumi:"deleteRegions"`
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Regions []ActiveActiveSubscriptionRegionsRegion `pulumi:"regions"`
	// ID of the subscription that the regions belong to
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a ActiveActiveSubscriptionRegions resource.
type ActiveActiveSubscriptionRegionsArgs struct {
	// Delete regions flag has to be set for re-creating and deleting regions
	DeleteRegions pulumi.BoolPtrInput
	// Cloud networking details, per region (multiple regions for Active-Active cluster)
	Regions ActiveActiveSubscriptionRegionsRegionArrayInput
	// ID of the subscription that the regions belong to
	SubscriptionId pulumi.StringInput
}

func (ActiveActiveSubscriptionRegionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionRegionsArgs)(nil)).Elem()
}

type ActiveActiveSubscriptionRegionsInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsOutput() ActiveActiveSubscriptionRegionsOutput
	ToActiveActiveSubscriptionRegionsOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsOutput
}

func (*ActiveActiveSubscriptionRegions) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (i *ActiveActiveSubscriptionRegions) ToActiveActiveSubscriptionRegionsOutput() ActiveActiveSubscriptionRegionsOutput {
	return i.ToActiveActiveSubscriptionRegionsOutputWithContext(context.Background())
}

func (i *ActiveActiveSubscriptionRegions) ToActiveActiveSubscriptionRegionsOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsOutput)
}

// ActiveActiveSubscriptionRegionsArrayInput is an input type that accepts ActiveActiveSubscriptionRegionsArray and ActiveActiveSubscriptionRegionsArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsArrayInput` via:
//
//	ActiveActiveSubscriptionRegionsArray{ ActiveActiveSubscriptionRegionsArgs{...} }
type ActiveActiveSubscriptionRegionsArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsArrayOutput() ActiveActiveSubscriptionRegionsArrayOutput
	ToActiveActiveSubscriptionRegionsArrayOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsArrayOutput
}

type ActiveActiveSubscriptionRegionsArray []ActiveActiveSubscriptionRegionsInput

func (ActiveActiveSubscriptionRegionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsArray) ToActiveActiveSubscriptionRegionsArrayOutput() ActiveActiveSubscriptionRegionsArrayOutput {
	return i.ToActiveActiveSubscriptionRegionsArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsArray) ToActiveActiveSubscriptionRegionsArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsArrayOutput)
}

// ActiveActiveSubscriptionRegionsMapInput is an input type that accepts ActiveActiveSubscriptionRegionsMap and ActiveActiveSubscriptionRegionsMapOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsMapInput` via:
//
//	ActiveActiveSubscriptionRegionsMap{ "key": ActiveActiveSubscriptionRegionsArgs{...} }
type ActiveActiveSubscriptionRegionsMapInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsMapOutput() ActiveActiveSubscriptionRegionsMapOutput
	ToActiveActiveSubscriptionRegionsMapOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsMapOutput
}

type ActiveActiveSubscriptionRegionsMap map[string]ActiveActiveSubscriptionRegionsInput

func (ActiveActiveSubscriptionRegionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsMap) ToActiveActiveSubscriptionRegionsMapOutput() ActiveActiveSubscriptionRegionsMapOutput {
	return i.ToActiveActiveSubscriptionRegionsMapOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsMap) ToActiveActiveSubscriptionRegionsMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsMapOutput)
}

type ActiveActiveSubscriptionRegionsOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsOutput) ToActiveActiveSubscriptionRegionsOutput() ActiveActiveSubscriptionRegionsOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsOutput) ToActiveActiveSubscriptionRegionsOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsOutput {
	return o
}

// Delete regions flag has to be set for re-creating and deleting regions
func (o ActiveActiveSubscriptionRegionsOutput) DeleteRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionRegions) pulumi.BoolPtrOutput { return v.DeleteRegions }).(pulumi.BoolPtrOutput)
}

// Cloud networking details, per region (multiple regions for Active-Active cluster)
func (o ActiveActiveSubscriptionRegionsOutput) Regions() ActiveActiveSubscriptionRegionsRegionArrayOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionRegions) ActiveActiveSubscriptionRegionsRegionArrayOutput {
		return v.Regions
	}).(ActiveActiveSubscriptionRegionsRegionArrayOutput)
}

// ID of the subscription that the regions belong to
func (o ActiveActiveSubscriptionRegionsOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionRegions) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type ActiveActiveSubscriptionRegionsArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsArrayOutput) ToActiveActiveSubscriptionRegionsArrayOutput() ActiveActiveSubscriptionRegionsArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsArrayOutput) ToActiveActiveSubscriptionRegionsArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionRegionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionRegions {
		return vs[0].([]*ActiveActiveSubscriptionRegions)[vs[1].(int)]
	}).(ActiveActiveSubscriptionRegionsOutput)
}

type ActiveActiveSubscriptionRegionsMapOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionRegions)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsMapOutput) ToActiveActiveSubscriptionRegionsMapOutput() ActiveActiveSubscriptionRegionsMapOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsMapOutput) ToActiveActiveSubscriptionRegionsMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsMapOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsMapOutput) MapIndex(k pulumi.StringInput) ActiveActiveSubscriptionRegionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionRegions {
		return vs[0].(map[string]*ActiveActiveSubscriptionRegions)[vs[1].(string)]
	}).(ActiveActiveSubscriptionRegionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsInput)(nil)).Elem(), &ActiveActiveSubscriptionRegions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsArrayInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsMapInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsMap{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsMapOutput{})
}
