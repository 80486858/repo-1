// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Subscription Peerings data source allows access to a list of VPC peerings for a particular subscription.
//
// ## Example Usage
//
// The following example returns a list of all VPC peering within a Subscription.
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rediscloud.GetSubscriptionPeerings(ctx, &rediscloud.GetSubscriptionPeeringsArgs{
//				SubscriptionId: "1234",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("rediscloudSubscriptionPeerings", example.Peerings)
//			return nil
//		})
//	}
//
// ```
func GetSubscriptionPeerings(ctx *pulumi.Context, args *GetSubscriptionPeeringsArgs, opts ...pulumi.InvokeOption) (*GetSubscriptionPeeringsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSubscriptionPeeringsResult
	err := ctx.Invoke("rediscloud:index/getSubscriptionPeerings:getSubscriptionPeerings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscriptionPeerings.
type GetSubscriptionPeeringsArgs struct {
	// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
	Status *string `pulumi:"status"`
	// ID of the subscription that the peerings belongs to
	SubscriptionId string `pulumi:"subscriptionId"`
}

// A collection of values returned by getSubscriptionPeerings.
type GetSubscriptionPeeringsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of subscription peerings.
	Peerings []GetSubscriptionPeeringsPeering `pulumi:"peerings"`
	// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
	Status         *string `pulumi:"status"`
	SubscriptionId string  `pulumi:"subscriptionId"`
}

func GetSubscriptionPeeringsOutput(ctx *pulumi.Context, args GetSubscriptionPeeringsOutputArgs, opts ...pulumi.InvokeOption) GetSubscriptionPeeringsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSubscriptionPeeringsResult, error) {
			args := v.(GetSubscriptionPeeringsArgs)
			r, err := GetSubscriptionPeerings(ctx, &args, opts...)
			var s GetSubscriptionPeeringsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSubscriptionPeeringsResultOutput)
}

// A collection of arguments for invoking getSubscriptionPeerings.
type GetSubscriptionPeeringsOutputArgs struct {
	// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// ID of the subscription that the peerings belongs to
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (GetSubscriptionPeeringsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPeeringsArgs)(nil)).Elem()
}

// A collection of values returned by getSubscriptionPeerings.
type GetSubscriptionPeeringsResultOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPeeringsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPeeringsResult)(nil)).Elem()
}

func (o GetSubscriptionPeeringsResultOutput) ToGetSubscriptionPeeringsResultOutput() GetSubscriptionPeeringsResultOutput {
	return o
}

func (o GetSubscriptionPeeringsResultOutput) ToGetSubscriptionPeeringsResultOutputWithContext(ctx context.Context) GetSubscriptionPeeringsResultOutput {
	return o
}

func (o GetSubscriptionPeeringsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubscriptionPeeringsResult] {
	return pulumix.Output[GetSubscriptionPeeringsResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetSubscriptionPeeringsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of subscription peerings.
func (o GetSubscriptionPeeringsResultOutput) Peerings() GetSubscriptionPeeringsPeeringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsResult) []GetSubscriptionPeeringsPeering { return v.Peerings }).(GetSubscriptionPeeringsPeeringArrayOutput)
}

// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
func (o GetSubscriptionPeeringsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o GetSubscriptionPeeringsResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSubscriptionPeeringsResultOutput{})
}
