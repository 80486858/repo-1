// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveActiveSubscriptionCreationPlan struct {
	// Maximum memory usage that will be used for your largest planned database, including replication and other overhead
	MemoryLimitInGb float64 `pulumi:"memoryLimitInGb"`
	// The planned number of databases in the subscription.
	Quantity int                                          `pulumi:"quantity"`
	Regions  []ActiveActiveSubscriptionCreationPlanRegion `pulumi:"regions"`
}

// ActiveActiveSubscriptionCreationPlanInput is an input type that accepts ActiveActiveSubscriptionCreationPlanArgs and ActiveActiveSubscriptionCreationPlanOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionCreationPlanInput` via:
//
//	ActiveActiveSubscriptionCreationPlanArgs{...}
type ActiveActiveSubscriptionCreationPlanInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionCreationPlanOutput() ActiveActiveSubscriptionCreationPlanOutput
	ToActiveActiveSubscriptionCreationPlanOutputWithContext(context.Context) ActiveActiveSubscriptionCreationPlanOutput
}

type ActiveActiveSubscriptionCreationPlanArgs struct {
	// Maximum memory usage that will be used for your largest planned database, including replication and other overhead
	MemoryLimitInGb pulumi.Float64Input `pulumi:"memoryLimitInGb"`
	// The planned number of databases in the subscription.
	Quantity pulumi.IntInput                                      `pulumi:"quantity"`
	Regions  ActiveActiveSubscriptionCreationPlanRegionArrayInput `pulumi:"regions"`
}

func (ActiveActiveSubscriptionCreationPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionCreationPlan)(nil)).Elem()
}

func (i ActiveActiveSubscriptionCreationPlanArgs) ToActiveActiveSubscriptionCreationPlanOutput() ActiveActiveSubscriptionCreationPlanOutput {
	return i.ToActiveActiveSubscriptionCreationPlanOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionCreationPlanArgs) ToActiveActiveSubscriptionCreationPlanOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionCreationPlanOutput)
}

func (i ActiveActiveSubscriptionCreationPlanArgs) ToActiveActiveSubscriptionCreationPlanPtrOutput() ActiveActiveSubscriptionCreationPlanPtrOutput {
	return i.ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionCreationPlanArgs) ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionCreationPlanOutput).ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(ctx)
}

// ActiveActiveSubscriptionCreationPlanPtrInput is an input type that accepts ActiveActiveSubscriptionCreationPlanArgs, ActiveActiveSubscriptionCreationPlanPtr and ActiveActiveSubscriptionCreationPlanPtrOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionCreationPlanPtrInput` via:
//
//	        ActiveActiveSubscriptionCreationPlanArgs{...}
//
//	or:
//
//	        nil
type ActiveActiveSubscriptionCreationPlanPtrInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionCreationPlanPtrOutput() ActiveActiveSubscriptionCreationPlanPtrOutput
	ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(context.Context) ActiveActiveSubscriptionCreationPlanPtrOutput
}

type activeActiveSubscriptionCreationPlanPtrType ActiveActiveSubscriptionCreationPlanArgs

func ActiveActiveSubscriptionCreationPlanPtr(v *ActiveActiveSubscriptionCreationPlanArgs) ActiveActiveSubscriptionCreationPlanPtrInput {
	return (*activeActiveSubscriptionCreationPlanPtrType)(v)
}

func (*activeActiveSubscriptionCreationPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionCreationPlan)(nil)).Elem()
}

func (i *activeActiveSubscriptionCreationPlanPtrType) ToActiveActiveSubscriptionCreationPlanPtrOutput() ActiveActiveSubscriptionCreationPlanPtrOutput {
	return i.ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (i *activeActiveSubscriptionCreationPlanPtrType) ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionCreationPlanPtrOutput)
}

type ActiveActiveSubscriptionCreationPlanOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionCreationPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionCreationPlan)(nil)).Elem()
}

func (o ActiveActiveSubscriptionCreationPlanOutput) ToActiveActiveSubscriptionCreationPlanOutput() ActiveActiveSubscriptionCreationPlanOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanOutput) ToActiveActiveSubscriptionCreationPlanOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanOutput) ToActiveActiveSubscriptionCreationPlanPtrOutput() ActiveActiveSubscriptionCreationPlanPtrOutput {
	return o.ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (o ActiveActiveSubscriptionCreationPlanOutput) ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActiveActiveSubscriptionCreationPlan) *ActiveActiveSubscriptionCreationPlan {
		return &v
	}).(ActiveActiveSubscriptionCreationPlanPtrOutput)
}

// Maximum memory usage that will be used for your largest planned database, including replication and other overhead
func (o ActiveActiveSubscriptionCreationPlanOutput) MemoryLimitInGb() pulumi.Float64Output {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlan) float64 { return v.MemoryLimitInGb }).(pulumi.Float64Output)
}

// The planned number of databases in the subscription.
func (o ActiveActiveSubscriptionCreationPlanOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlan) int { return v.Quantity }).(pulumi.IntOutput)
}

func (o ActiveActiveSubscriptionCreationPlanOutput) Regions() ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlan) []ActiveActiveSubscriptionCreationPlanRegion {
		return v.Regions
	}).(ActiveActiveSubscriptionCreationPlanRegionArrayOutput)
}

type ActiveActiveSubscriptionCreationPlanPtrOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionCreationPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionCreationPlan)(nil)).Elem()
}

func (o ActiveActiveSubscriptionCreationPlanPtrOutput) ToActiveActiveSubscriptionCreationPlanPtrOutput() ActiveActiveSubscriptionCreationPlanPtrOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanPtrOutput) ToActiveActiveSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanPtrOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanPtrOutput) Elem() ActiveActiveSubscriptionCreationPlanOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionCreationPlan) ActiveActiveSubscriptionCreationPlan {
		if v != nil {
			return *v
		}
		var ret ActiveActiveSubscriptionCreationPlan
		return ret
	}).(ActiveActiveSubscriptionCreationPlanOutput)
}

// Maximum memory usage that will be used for your largest planned database, including replication and other overhead
func (o ActiveActiveSubscriptionCreationPlanPtrOutput) MemoryLimitInGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionCreationPlan) *float64 {
		if v == nil {
			return nil
		}
		return &v.MemoryLimitInGb
	}).(pulumi.Float64PtrOutput)
}

// The planned number of databases in the subscription.
func (o ActiveActiveSubscriptionCreationPlanPtrOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionCreationPlan) *int {
		if v == nil {
			return nil
		}
		return &v.Quantity
	}).(pulumi.IntPtrOutput)
}

func (o ActiveActiveSubscriptionCreationPlanPtrOutput) Regions() ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionCreationPlan) []ActiveActiveSubscriptionCreationPlanRegion {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(ActiveActiveSubscriptionCreationPlanRegionArrayOutput)
}

type ActiveActiveSubscriptionCreationPlanRegion struct {
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr string `pulumi:"networkingDeploymentCidr"`
	// Throughput measurement for an active-active subscription
	ReadOperationsPerSecond int `pulumi:"readOperationsPerSecond"`
	// Deployment region as defined by cloud provider
	Region string `pulumi:"region"`
	// Throughput measurement for an active-active subscription
	WriteOperationsPerSecond int `pulumi:"writeOperationsPerSecond"`
}

// ActiveActiveSubscriptionCreationPlanRegionInput is an input type that accepts ActiveActiveSubscriptionCreationPlanRegionArgs and ActiveActiveSubscriptionCreationPlanRegionOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionCreationPlanRegionInput` via:
//
//	ActiveActiveSubscriptionCreationPlanRegionArgs{...}
type ActiveActiveSubscriptionCreationPlanRegionInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionCreationPlanRegionOutput() ActiveActiveSubscriptionCreationPlanRegionOutput
	ToActiveActiveSubscriptionCreationPlanRegionOutputWithContext(context.Context) ActiveActiveSubscriptionCreationPlanRegionOutput
}

type ActiveActiveSubscriptionCreationPlanRegionArgs struct {
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr pulumi.StringInput `pulumi:"networkingDeploymentCidr"`
	// Throughput measurement for an active-active subscription
	ReadOperationsPerSecond pulumi.IntInput `pulumi:"readOperationsPerSecond"`
	// Deployment region as defined by cloud provider
	Region pulumi.StringInput `pulumi:"region"`
	// Throughput measurement for an active-active subscription
	WriteOperationsPerSecond pulumi.IntInput `pulumi:"writeOperationsPerSecond"`
}

func (ActiveActiveSubscriptionCreationPlanRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionCreationPlanRegionArgs) ToActiveActiveSubscriptionCreationPlanRegionOutput() ActiveActiveSubscriptionCreationPlanRegionOutput {
	return i.ToActiveActiveSubscriptionCreationPlanRegionOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionCreationPlanRegionArgs) ToActiveActiveSubscriptionCreationPlanRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionCreationPlanRegionOutput)
}

// ActiveActiveSubscriptionCreationPlanRegionArrayInput is an input type that accepts ActiveActiveSubscriptionCreationPlanRegionArray and ActiveActiveSubscriptionCreationPlanRegionArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionCreationPlanRegionArrayInput` via:
//
//	ActiveActiveSubscriptionCreationPlanRegionArray{ ActiveActiveSubscriptionCreationPlanRegionArgs{...} }
type ActiveActiveSubscriptionCreationPlanRegionArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionCreationPlanRegionArrayOutput() ActiveActiveSubscriptionCreationPlanRegionArrayOutput
	ToActiveActiveSubscriptionCreationPlanRegionArrayOutputWithContext(context.Context) ActiveActiveSubscriptionCreationPlanRegionArrayOutput
}

type ActiveActiveSubscriptionCreationPlanRegionArray []ActiveActiveSubscriptionCreationPlanRegionInput

func (ActiveActiveSubscriptionCreationPlanRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionCreationPlanRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionCreationPlanRegionArray) ToActiveActiveSubscriptionCreationPlanRegionArrayOutput() ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return i.ToActiveActiveSubscriptionCreationPlanRegionArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionCreationPlanRegionArray) ToActiveActiveSubscriptionCreationPlanRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionCreationPlanRegionArrayOutput)
}

type ActiveActiveSubscriptionCreationPlanRegionOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionCreationPlanRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionCreationPlanRegionOutput) ToActiveActiveSubscriptionCreationPlanRegionOutput() ActiveActiveSubscriptionCreationPlanRegionOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanRegionOutput) ToActiveActiveSubscriptionCreationPlanRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanRegionOutput {
	return o
}

// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
func (o ActiveActiveSubscriptionCreationPlanRegionOutput) NetworkingDeploymentCidr() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlanRegion) string { return v.NetworkingDeploymentCidr }).(pulumi.StringOutput)
}

// Throughput measurement for an active-active subscription
func (o ActiveActiveSubscriptionCreationPlanRegionOutput) ReadOperationsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlanRegion) int { return v.ReadOperationsPerSecond }).(pulumi.IntOutput)
}

// Deployment region as defined by cloud provider
func (o ActiveActiveSubscriptionCreationPlanRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlanRegion) string { return v.Region }).(pulumi.StringOutput)
}

// Throughput measurement for an active-active subscription
func (o ActiveActiveSubscriptionCreationPlanRegionOutput) WriteOperationsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionCreationPlanRegion) int { return v.WriteOperationsPerSecond }).(pulumi.IntOutput)
}

type ActiveActiveSubscriptionCreationPlanRegionArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionCreationPlanRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionCreationPlanRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionCreationPlanRegionArrayOutput) ToActiveActiveSubscriptionCreationPlanRegionArrayOutput() ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanRegionArrayOutput) ToActiveActiveSubscriptionCreationPlanRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionCreationPlanRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionCreationPlanRegionArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionCreationPlanRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionCreationPlanRegion {
		return vs[0].([]ActiveActiveSubscriptionCreationPlanRegion)[vs[1].(int)]
	}).(ActiveActiveSubscriptionCreationPlanRegionOutput)
}

type ActiveActiveSubscriptionDatabaseGlobalAlert struct {
	// A meaningful name to identify the database
	Name string `pulumi:"name"`
	// Alert value
	Value int `pulumi:"value"`
}

// ActiveActiveSubscriptionDatabaseGlobalAlertInput is an input type that accepts ActiveActiveSubscriptionDatabaseGlobalAlertArgs and ActiveActiveSubscriptionDatabaseGlobalAlertOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseGlobalAlertInput` via:
//
//	ActiveActiveSubscriptionDatabaseGlobalAlertArgs{...}
type ActiveActiveSubscriptionDatabaseGlobalAlertInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseGlobalAlertOutput() ActiveActiveSubscriptionDatabaseGlobalAlertOutput
	ToActiveActiveSubscriptionDatabaseGlobalAlertOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertOutput
}

type ActiveActiveSubscriptionDatabaseGlobalAlertArgs struct {
	// A meaningful name to identify the database
	Name pulumi.StringInput `pulumi:"name"`
	// Alert value
	Value pulumi.IntInput `pulumi:"value"`
}

func (ActiveActiveSubscriptionDatabaseGlobalAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseGlobalAlert)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseGlobalAlertArgs) ToActiveActiveSubscriptionDatabaseGlobalAlertOutput() ActiveActiveSubscriptionDatabaseGlobalAlertOutput {
	return i.ToActiveActiveSubscriptionDatabaseGlobalAlertOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseGlobalAlertArgs) ToActiveActiveSubscriptionDatabaseGlobalAlertOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseGlobalAlertOutput)
}

// ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput is an input type that accepts ActiveActiveSubscriptionDatabaseGlobalAlertArray and ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput` via:
//
//	ActiveActiveSubscriptionDatabaseGlobalAlertArray{ ActiveActiveSubscriptionDatabaseGlobalAlertArgs{...} }
type ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput
	ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput
}

type ActiveActiveSubscriptionDatabaseGlobalAlertArray []ActiveActiveSubscriptionDatabaseGlobalAlertInput

func (ActiveActiveSubscriptionDatabaseGlobalAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseGlobalAlert)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseGlobalAlertArray) ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
	return i.ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseGlobalAlertArray) ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput)
}

type ActiveActiveSubscriptionDatabaseGlobalAlertOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseGlobalAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseGlobalAlert)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseGlobalAlertOutput) ToActiveActiveSubscriptionDatabaseGlobalAlertOutput() ActiveActiveSubscriptionDatabaseGlobalAlertOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseGlobalAlertOutput) ToActiveActiveSubscriptionDatabaseGlobalAlertOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertOutput {
	return o
}

// A meaningful name to identify the database
func (o ActiveActiveSubscriptionDatabaseGlobalAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseGlobalAlert) string { return v.Name }).(pulumi.StringOutput)
}

// Alert value
func (o ActiveActiveSubscriptionDatabaseGlobalAlertOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseGlobalAlert) int { return v.Value }).(pulumi.IntOutput)
}

type ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseGlobalAlert)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput) ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput) ToActiveActiveSubscriptionDatabaseGlobalAlertArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionDatabaseGlobalAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionDatabaseGlobalAlert {
		return vs[0].([]ActiveActiveSubscriptionDatabaseGlobalAlert)[vs[1].(int)]
	}).(ActiveActiveSubscriptionDatabaseGlobalAlertOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegion struct {
	// Region name.
	Name string `pulumi:"name"`
	// A block defining Redis regional instance of an Active-Active database alert, documented below, can be specified multiple times
	OverrideGlobalAlerts []ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert `pulumi:"overrideGlobalAlerts"`
	// Regional instance of an Active-Active database data persistence rate (in persistent storage)
	OverrideGlobalDataPersistence *string `pulumi:"overrideGlobalDataPersistence"`
	// If specified, this regional instance of an Active-Active database password will be used to access the database
	OverrideGlobalPassword *string `pulumi:"overrideGlobalPassword"`
	// List of regional instance of an Active-Active database source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'] )
	OverrideGlobalSourceIps []string `pulumi:"overrideGlobalSourceIps"`
}

// ActiveActiveSubscriptionDatabaseOverrideRegionInput is an input type that accepts ActiveActiveSubscriptionDatabaseOverrideRegionArgs and ActiveActiveSubscriptionDatabaseOverrideRegionOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseOverrideRegionInput` via:
//
//	ActiveActiveSubscriptionDatabaseOverrideRegionArgs{...}
type ActiveActiveSubscriptionDatabaseOverrideRegionInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseOverrideRegionOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOutput
	ToActiveActiveSubscriptionDatabaseOverrideRegionOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOutput
}

type ActiveActiveSubscriptionDatabaseOverrideRegionArgs struct {
	// Region name.
	Name pulumi.StringInput `pulumi:"name"`
	// A block defining Redis regional instance of an Active-Active database alert, documented below, can be specified multiple times
	OverrideGlobalAlerts ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayInput `pulumi:"overrideGlobalAlerts"`
	// Regional instance of an Active-Active database data persistence rate (in persistent storage)
	OverrideGlobalDataPersistence pulumi.StringPtrInput `pulumi:"overrideGlobalDataPersistence"`
	// If specified, this regional instance of an Active-Active database password will be used to access the database
	OverrideGlobalPassword pulumi.StringPtrInput `pulumi:"overrideGlobalPassword"`
	// List of regional instance of an Active-Active database source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'] )
	OverrideGlobalSourceIps pulumi.StringArrayInput `pulumi:"overrideGlobalSourceIps"`
}

func (ActiveActiveSubscriptionDatabaseOverrideRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionArgs) ToActiveActiveSubscriptionDatabaseOverrideRegionOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOutput {
	return i.ToActiveActiveSubscriptionDatabaseOverrideRegionOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionArgs) ToActiveActiveSubscriptionDatabaseOverrideRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseOverrideRegionOutput)
}

// ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput is an input type that accepts ActiveActiveSubscriptionDatabaseOverrideRegionArray and ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput` via:
//
//	ActiveActiveSubscriptionDatabaseOverrideRegionArray{ ActiveActiveSubscriptionDatabaseOverrideRegionArgs{...} }
type ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput
	ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput
}

type ActiveActiveSubscriptionDatabaseOverrideRegionArray []ActiveActiveSubscriptionDatabaseOverrideRegionInput

func (ActiveActiveSubscriptionDatabaseOverrideRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseOverrideRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionArray) ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
	return i.ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionArray) ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseOverrideRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOutput {
	return o
}

// Region name.
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegion) string { return v.Name }).(pulumi.StringOutput)
}

// A block defining Redis regional instance of an Active-Active database alert, documented below, can be specified multiple times
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) OverrideGlobalAlerts() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegion) []ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert {
		return v.OverrideGlobalAlerts
	}).(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput)
}

// Regional instance of an Active-Active database data persistence rate (in persistent storage)
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) OverrideGlobalDataPersistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegion) *string { return v.OverrideGlobalDataPersistence }).(pulumi.StringPtrOutput)
}

// If specified, this regional instance of an Active-Active database password will be used to access the database
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) OverrideGlobalPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegion) *string { return v.OverrideGlobalPassword }).(pulumi.StringPtrOutput)
}

// List of regional instance of an Active-Active database source IP addresses or subnet masks. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'] )
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOutput) OverrideGlobalSourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegion) []string { return v.OverrideGlobalSourceIps }).(pulumi.StringArrayOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseOverrideRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionDatabaseOverrideRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionDatabaseOverrideRegion {
		return vs[0].([]ActiveActiveSubscriptionDatabaseOverrideRegion)[vs[1].(int)]
	}).(ActiveActiveSubscriptionDatabaseOverrideRegionOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert struct {
	// Alert name
	Name string `pulumi:"name"`
	// Alert value
	Value int `pulumi:"value"`
}

// ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertInput is an input type that accepts ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs and ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertInput` via:
//
//	ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs{...}
type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput
	ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs struct {
	// Alert name
	Name pulumi.StringInput `pulumi:"name"`
	// Alert value
	Value pulumi.IntInput `pulumi:"value"`
}

func (ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput {
	return i.ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput)
}

// ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayInput is an input type that accepts ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray and ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayInput` via:
//
//	ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray{ ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs{...} }
type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput
	ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray []ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertInput

func (ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput {
	return i.ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput {
	return o
}

// Alert name
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert) string { return v.Name }).(pulumi.StringOutput)
}

// Alert value
func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert) int { return v.Value }).(pulumi.IntOutput)
}

type ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput() ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput) ToActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert {
		return vs[0].([]ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert)[vs[1].(int)]
	}).(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput)
}

type ActiveActiveSubscriptionRegionsRegion struct {
	// A block defining the write and read operations in the region, per database, documented below
	Databases []ActiveActiveSubscriptionRegionsRegionDatabase `pulumi:"databases"`
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr string `pulumi:"networkingDeploymentCidr"`
	// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the `networkingDeploymentCidr` field. During re-create, the region will be deleted (so the `deleteRegions` flag also needs to be set) and then created again. Default: 'false'
	RecreateRegion *bool `pulumi:"recreateRegion"`
	// Region name
	Region string `pulumi:"region"`
	// The ID of the region, as created by the API
	RegionId *int `pulumi:"regionId"`
	// Identifier of the VPC to be peered, set by the API
	VpcId *string `pulumi:"vpcId"`
}

// ActiveActiveSubscriptionRegionsRegionInput is an input type that accepts ActiveActiveSubscriptionRegionsRegionArgs and ActiveActiveSubscriptionRegionsRegionOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsRegionInput` via:
//
//	ActiveActiveSubscriptionRegionsRegionArgs{...}
type ActiveActiveSubscriptionRegionsRegionInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsRegionOutput() ActiveActiveSubscriptionRegionsRegionOutput
	ToActiveActiveSubscriptionRegionsRegionOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsRegionOutput
}

type ActiveActiveSubscriptionRegionsRegionArgs struct {
	// A block defining the write and read operations in the region, per database, documented below
	Databases ActiveActiveSubscriptionRegionsRegionDatabaseArrayInput `pulumi:"databases"`
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr pulumi.StringInput `pulumi:"networkingDeploymentCidr"`
	// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the `networkingDeploymentCidr` field. During re-create, the region will be deleted (so the `deleteRegions` flag also needs to be set) and then created again. Default: 'false'
	RecreateRegion pulumi.BoolPtrInput `pulumi:"recreateRegion"`
	// Region name
	Region pulumi.StringInput `pulumi:"region"`
	// The ID of the region, as created by the API
	RegionId pulumi.IntPtrInput `pulumi:"regionId"`
	// Identifier of the VPC to be peered, set by the API
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (ActiveActiveSubscriptionRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsRegionArgs) ToActiveActiveSubscriptionRegionsRegionOutput() ActiveActiveSubscriptionRegionsRegionOutput {
	return i.ToActiveActiveSubscriptionRegionsRegionOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsRegionArgs) ToActiveActiveSubscriptionRegionsRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsRegionOutput)
}

// ActiveActiveSubscriptionRegionsRegionArrayInput is an input type that accepts ActiveActiveSubscriptionRegionsRegionArray and ActiveActiveSubscriptionRegionsRegionArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsRegionArrayInput` via:
//
//	ActiveActiveSubscriptionRegionsRegionArray{ ActiveActiveSubscriptionRegionsRegionArgs{...} }
type ActiveActiveSubscriptionRegionsRegionArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsRegionArrayOutput() ActiveActiveSubscriptionRegionsRegionArrayOutput
	ToActiveActiveSubscriptionRegionsRegionArrayOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsRegionArrayOutput
}

type ActiveActiveSubscriptionRegionsRegionArray []ActiveActiveSubscriptionRegionsRegionInput

func (ActiveActiveSubscriptionRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionRegionsRegion)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsRegionArray) ToActiveActiveSubscriptionRegionsRegionArrayOutput() ActiveActiveSubscriptionRegionsRegionArrayOutput {
	return i.ToActiveActiveSubscriptionRegionsRegionArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsRegionArray) ToActiveActiveSubscriptionRegionsRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsRegionArrayOutput)
}

type ActiveActiveSubscriptionRegionsRegionOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsRegionOutput) ToActiveActiveSubscriptionRegionsRegionOutput() ActiveActiveSubscriptionRegionsRegionOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionOutput) ToActiveActiveSubscriptionRegionsRegionOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionOutput {
	return o
}

// A block defining the write and read operations in the region, per database, documented below
func (o ActiveActiveSubscriptionRegionsRegionOutput) Databases() ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) []ActiveActiveSubscriptionRegionsRegionDatabase {
		return v.Databases
	}).(ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput)
}

// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
func (o ActiveActiveSubscriptionRegionsRegionOutput) NetworkingDeploymentCidr() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) string { return v.NetworkingDeploymentCidr }).(pulumi.StringOutput)
}

// Protection flag, needs to be set if a region has to be re-created. A region will need to be re-created in the case of a change on the `networkingDeploymentCidr` field. During re-create, the region will be deleted (so the `deleteRegions` flag also needs to be set) and then created again. Default: 'false'
func (o ActiveActiveSubscriptionRegionsRegionOutput) RecreateRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) *bool { return v.RecreateRegion }).(pulumi.BoolPtrOutput)
}

// Region name
func (o ActiveActiveSubscriptionRegionsRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) string { return v.Region }).(pulumi.StringOutput)
}

// The ID of the region, as created by the API
func (o ActiveActiveSubscriptionRegionsRegionOutput) RegionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) *int { return v.RegionId }).(pulumi.IntPtrOutput)
}

// Identifier of the VPC to be peered, set by the API
func (o ActiveActiveSubscriptionRegionsRegionOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegion) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ActiveActiveSubscriptionRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionRegionsRegion)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsRegionArrayOutput) ToActiveActiveSubscriptionRegionsRegionArrayOutput() ActiveActiveSubscriptionRegionsRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionArrayOutput) ToActiveActiveSubscriptionRegionsRegionArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionRegionsRegion {
		return vs[0].([]ActiveActiveSubscriptionRegionsRegion)[vs[1].(int)]
	}).(ActiveActiveSubscriptionRegionsRegionOutput)
}

type ActiveActiveSubscriptionRegionsRegionDatabase struct {
	// Database ID belonging to the subscription
	DatabaseId int `pulumi:"databaseId"`
	// Database name belonging to the subscription
	DatabaseName string `pulumi:"databaseName"`
	// Local read operations per second for this active-active region
	LocalReadOperationsPerSecond int `pulumi:"localReadOperationsPerSecond"`
	// Local write operations per second for this active-active region
	LocalWriteOperationsPerSecond int `pulumi:"localWriteOperationsPerSecond"`
}

// ActiveActiveSubscriptionRegionsRegionDatabaseInput is an input type that accepts ActiveActiveSubscriptionRegionsRegionDatabaseArgs and ActiveActiveSubscriptionRegionsRegionDatabaseOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsRegionDatabaseInput` via:
//
//	ActiveActiveSubscriptionRegionsRegionDatabaseArgs{...}
type ActiveActiveSubscriptionRegionsRegionDatabaseInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsRegionDatabaseOutput() ActiveActiveSubscriptionRegionsRegionDatabaseOutput
	ToActiveActiveSubscriptionRegionsRegionDatabaseOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseOutput
}

type ActiveActiveSubscriptionRegionsRegionDatabaseArgs struct {
	// Database ID belonging to the subscription
	DatabaseId pulumi.IntInput `pulumi:"databaseId"`
	// Database name belonging to the subscription
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Local read operations per second for this active-active region
	LocalReadOperationsPerSecond pulumi.IntInput `pulumi:"localReadOperationsPerSecond"`
	// Local write operations per second for this active-active region
	LocalWriteOperationsPerSecond pulumi.IntInput `pulumi:"localWriteOperationsPerSecond"`
}

func (ActiveActiveSubscriptionRegionsRegionDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionDatabase)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsRegionDatabaseArgs) ToActiveActiveSubscriptionRegionsRegionDatabaseOutput() ActiveActiveSubscriptionRegionsRegionDatabaseOutput {
	return i.ToActiveActiveSubscriptionRegionsRegionDatabaseOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsRegionDatabaseArgs) ToActiveActiveSubscriptionRegionsRegionDatabaseOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsRegionDatabaseOutput)
}

// ActiveActiveSubscriptionRegionsRegionDatabaseArrayInput is an input type that accepts ActiveActiveSubscriptionRegionsRegionDatabaseArray and ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionRegionsRegionDatabaseArrayInput` via:
//
//	ActiveActiveSubscriptionRegionsRegionDatabaseArray{ ActiveActiveSubscriptionRegionsRegionDatabaseArgs{...} }
type ActiveActiveSubscriptionRegionsRegionDatabaseArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput() ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput
	ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutputWithContext(context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput
}

type ActiveActiveSubscriptionRegionsRegionDatabaseArray []ActiveActiveSubscriptionRegionsRegionDatabaseInput

func (ActiveActiveSubscriptionRegionsRegionDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionRegionsRegionDatabase)(nil)).Elem()
}

func (i ActiveActiveSubscriptionRegionsRegionDatabaseArray) ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput() ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput {
	return i.ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionRegionsRegionDatabaseArray) ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput)
}

type ActiveActiveSubscriptionRegionsRegionDatabaseOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsRegionDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionDatabase)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) ToActiveActiveSubscriptionRegionsRegionDatabaseOutput() ActiveActiveSubscriptionRegionsRegionDatabaseOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) ToActiveActiveSubscriptionRegionsRegionDatabaseOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseOutput {
	return o
}

// Database ID belonging to the subscription
func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) DatabaseId() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegionDatabase) int { return v.DatabaseId }).(pulumi.IntOutput)
}

// Database name belonging to the subscription
func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegionDatabase) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Local read operations per second for this active-active region
func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) LocalReadOperationsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegionDatabase) int { return v.LocalReadOperationsPerSecond }).(pulumi.IntOutput)
}

// Local write operations per second for this active-active region
func (o ActiveActiveSubscriptionRegionsRegionDatabaseOutput) LocalWriteOperationsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v ActiveActiveSubscriptionRegionsRegionDatabase) int { return v.LocalWriteOperationsPerSecond }).(pulumi.IntOutput)
}

type ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveActiveSubscriptionRegionsRegionDatabase)(nil)).Elem()
}

func (o ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput) ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput() ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput) ToActiveActiveSubscriptionRegionsRegionDatabaseArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionRegionsRegionDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveActiveSubscriptionRegionsRegionDatabase {
		return vs[0].([]ActiveActiveSubscriptionRegionsRegionDatabase)[vs[1].(int)]
	}).(ActiveActiveSubscriptionRegionsRegionDatabaseOutput)
}

type SubscriptionAllowlist struct {
	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	Cidrs []string `pulumi:"cidrs"`
	// Set of security groups that are allowed to access the databases associated with this subscription
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
}

// SubscriptionAllowlistInput is an input type that accepts SubscriptionAllowlistArgs and SubscriptionAllowlistOutput values.
// You can construct a concrete instance of `SubscriptionAllowlistInput` via:
//
//	SubscriptionAllowlistArgs{...}
type SubscriptionAllowlistInput interface {
	pulumi.Input

	ToSubscriptionAllowlistOutput() SubscriptionAllowlistOutput
	ToSubscriptionAllowlistOutputWithContext(context.Context) SubscriptionAllowlistOutput
}

type SubscriptionAllowlistArgs struct {
	// Set of CIDR ranges that are allowed to access the databases associated with this subscription
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
	// Set of security groups that are allowed to access the databases associated with this subscription
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
}

func (SubscriptionAllowlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionAllowlist)(nil)).Elem()
}

func (i SubscriptionAllowlistArgs) ToSubscriptionAllowlistOutput() SubscriptionAllowlistOutput {
	return i.ToSubscriptionAllowlistOutputWithContext(context.Background())
}

func (i SubscriptionAllowlistArgs) ToSubscriptionAllowlistOutputWithContext(ctx context.Context) SubscriptionAllowlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAllowlistOutput)
}

func (i SubscriptionAllowlistArgs) ToSubscriptionAllowlistPtrOutput() SubscriptionAllowlistPtrOutput {
	return i.ToSubscriptionAllowlistPtrOutputWithContext(context.Background())
}

func (i SubscriptionAllowlistArgs) ToSubscriptionAllowlistPtrOutputWithContext(ctx context.Context) SubscriptionAllowlistPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAllowlistOutput).ToSubscriptionAllowlistPtrOutputWithContext(ctx)
}

// SubscriptionAllowlistPtrInput is an input type that accepts SubscriptionAllowlistArgs, SubscriptionAllowlistPtr and SubscriptionAllowlistPtrOutput values.
// You can construct a concrete instance of `SubscriptionAllowlistPtrInput` via:
//
//	        SubscriptionAllowlistArgs{...}
//
//	or:
//
//	        nil
type SubscriptionAllowlistPtrInput interface {
	pulumi.Input

	ToSubscriptionAllowlistPtrOutput() SubscriptionAllowlistPtrOutput
	ToSubscriptionAllowlistPtrOutputWithContext(context.Context) SubscriptionAllowlistPtrOutput
}

type subscriptionAllowlistPtrType SubscriptionAllowlistArgs

func SubscriptionAllowlistPtr(v *SubscriptionAllowlistArgs) SubscriptionAllowlistPtrInput {
	return (*subscriptionAllowlistPtrType)(v)
}

func (*subscriptionAllowlistPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAllowlist)(nil)).Elem()
}

func (i *subscriptionAllowlistPtrType) ToSubscriptionAllowlistPtrOutput() SubscriptionAllowlistPtrOutput {
	return i.ToSubscriptionAllowlistPtrOutputWithContext(context.Background())
}

func (i *subscriptionAllowlistPtrType) ToSubscriptionAllowlistPtrOutputWithContext(ctx context.Context) SubscriptionAllowlistPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAllowlistPtrOutput)
}

type SubscriptionAllowlistOutput struct{ *pulumi.OutputState }

func (SubscriptionAllowlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionAllowlist)(nil)).Elem()
}

func (o SubscriptionAllowlistOutput) ToSubscriptionAllowlistOutput() SubscriptionAllowlistOutput {
	return o
}

func (o SubscriptionAllowlistOutput) ToSubscriptionAllowlistOutputWithContext(ctx context.Context) SubscriptionAllowlistOutput {
	return o
}

func (o SubscriptionAllowlistOutput) ToSubscriptionAllowlistPtrOutput() SubscriptionAllowlistPtrOutput {
	return o.ToSubscriptionAllowlistPtrOutputWithContext(context.Background())
}

func (o SubscriptionAllowlistOutput) ToSubscriptionAllowlistPtrOutputWithContext(ctx context.Context) SubscriptionAllowlistPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionAllowlist) *SubscriptionAllowlist {
		return &v
	}).(SubscriptionAllowlistPtrOutput)
}

// Set of CIDR ranges that are allowed to access the databases associated with this subscription
func (o SubscriptionAllowlistOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubscriptionAllowlist) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// Set of security groups that are allowed to access the databases associated with this subscription
func (o SubscriptionAllowlistOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubscriptionAllowlist) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

type SubscriptionAllowlistPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionAllowlistPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAllowlist)(nil)).Elem()
}

func (o SubscriptionAllowlistPtrOutput) ToSubscriptionAllowlistPtrOutput() SubscriptionAllowlistPtrOutput {
	return o
}

func (o SubscriptionAllowlistPtrOutput) ToSubscriptionAllowlistPtrOutputWithContext(ctx context.Context) SubscriptionAllowlistPtrOutput {
	return o
}

func (o SubscriptionAllowlistPtrOutput) Elem() SubscriptionAllowlistOutput {
	return o.ApplyT(func(v *SubscriptionAllowlist) SubscriptionAllowlist {
		if v != nil {
			return *v
		}
		var ret SubscriptionAllowlist
		return ret
	}).(SubscriptionAllowlistOutput)
}

// Set of CIDR ranges that are allowed to access the databases associated with this subscription
func (o SubscriptionAllowlistPtrOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionAllowlist) []string {
		if v == nil {
			return nil
		}
		return v.Cidrs
	}).(pulumi.StringArrayOutput)
}

// Set of security groups that are allowed to access the databases associated with this subscription
func (o SubscriptionAllowlistPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionAllowlist) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

type SubscriptionCloudProvider struct {
	// Cloud account identifier. Default: Redis Labs internal cloud account
	// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
	// only with Redis Labs internal cloud account
	CloudAccountId *string `pulumi:"cloudAccountId"`
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`). Default: ‘AWS’
	Provider *string `pulumi:"provider"`
	// A region object, documented below
	Regions []SubscriptionCloudProviderRegion `pulumi:"regions"`
}

// SubscriptionCloudProviderInput is an input type that accepts SubscriptionCloudProviderArgs and SubscriptionCloudProviderOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderInput` via:
//
//	SubscriptionCloudProviderArgs{...}
type SubscriptionCloudProviderInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderOutput() SubscriptionCloudProviderOutput
	ToSubscriptionCloudProviderOutputWithContext(context.Context) SubscriptionCloudProviderOutput
}

type SubscriptionCloudProviderArgs struct {
	// Cloud account identifier. Default: Redis Labs internal cloud account
	// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
	// only with Redis Labs internal cloud account
	CloudAccountId pulumi.StringPtrInput `pulumi:"cloudAccountId"`
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`). Default: ‘AWS’
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// A region object, documented below
	Regions SubscriptionCloudProviderRegionArrayInput `pulumi:"regions"`
}

func (SubscriptionCloudProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProvider)(nil)).Elem()
}

func (i SubscriptionCloudProviderArgs) ToSubscriptionCloudProviderOutput() SubscriptionCloudProviderOutput {
	return i.ToSubscriptionCloudProviderOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderArgs) ToSubscriptionCloudProviderOutputWithContext(ctx context.Context) SubscriptionCloudProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderOutput)
}

func (i SubscriptionCloudProviderArgs) ToSubscriptionCloudProviderPtrOutput() SubscriptionCloudProviderPtrOutput {
	return i.ToSubscriptionCloudProviderPtrOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderArgs) ToSubscriptionCloudProviderPtrOutputWithContext(ctx context.Context) SubscriptionCloudProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderOutput).ToSubscriptionCloudProviderPtrOutputWithContext(ctx)
}

// SubscriptionCloudProviderPtrInput is an input type that accepts SubscriptionCloudProviderArgs, SubscriptionCloudProviderPtr and SubscriptionCloudProviderPtrOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderPtrInput` via:
//
//	        SubscriptionCloudProviderArgs{...}
//
//	or:
//
//	        nil
type SubscriptionCloudProviderPtrInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderPtrOutput() SubscriptionCloudProviderPtrOutput
	ToSubscriptionCloudProviderPtrOutputWithContext(context.Context) SubscriptionCloudProviderPtrOutput
}

type subscriptionCloudProviderPtrType SubscriptionCloudProviderArgs

func SubscriptionCloudProviderPtr(v *SubscriptionCloudProviderArgs) SubscriptionCloudProviderPtrInput {
	return (*subscriptionCloudProviderPtrType)(v)
}

func (*subscriptionCloudProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudProvider)(nil)).Elem()
}

func (i *subscriptionCloudProviderPtrType) ToSubscriptionCloudProviderPtrOutput() SubscriptionCloudProviderPtrOutput {
	return i.ToSubscriptionCloudProviderPtrOutputWithContext(context.Background())
}

func (i *subscriptionCloudProviderPtrType) ToSubscriptionCloudProviderPtrOutputWithContext(ctx context.Context) SubscriptionCloudProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderPtrOutput)
}

type SubscriptionCloudProviderOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProvider)(nil)).Elem()
}

func (o SubscriptionCloudProviderOutput) ToSubscriptionCloudProviderOutput() SubscriptionCloudProviderOutput {
	return o
}

func (o SubscriptionCloudProviderOutput) ToSubscriptionCloudProviderOutputWithContext(ctx context.Context) SubscriptionCloudProviderOutput {
	return o
}

func (o SubscriptionCloudProviderOutput) ToSubscriptionCloudProviderPtrOutput() SubscriptionCloudProviderPtrOutput {
	return o.ToSubscriptionCloudProviderPtrOutputWithContext(context.Background())
}

func (o SubscriptionCloudProviderOutput) ToSubscriptionCloudProviderPtrOutputWithContext(ctx context.Context) SubscriptionCloudProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionCloudProvider) *SubscriptionCloudProvider {
		return &v
	}).(SubscriptionCloudProviderPtrOutput)
}

// Cloud account identifier. Default: Redis Labs internal cloud account
// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
// only with Redis Labs internal cloud account
func (o SubscriptionCloudProviderOutput) CloudAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProvider) *string { return v.CloudAccountId }).(pulumi.StringPtrOutput)
}

// The cloud provider to use with the subscription, (either `AWS` or `GCP`). Default: ‘AWS’
func (o SubscriptionCloudProviderOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProvider) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// A region object, documented below
func (o SubscriptionCloudProviderOutput) Regions() SubscriptionCloudProviderRegionArrayOutput {
	return o.ApplyT(func(v SubscriptionCloudProvider) []SubscriptionCloudProviderRegion { return v.Regions }).(SubscriptionCloudProviderRegionArrayOutput)
}

type SubscriptionCloudProviderPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCloudProvider)(nil)).Elem()
}

func (o SubscriptionCloudProviderPtrOutput) ToSubscriptionCloudProviderPtrOutput() SubscriptionCloudProviderPtrOutput {
	return o
}

func (o SubscriptionCloudProviderPtrOutput) ToSubscriptionCloudProviderPtrOutputWithContext(ctx context.Context) SubscriptionCloudProviderPtrOutput {
	return o
}

func (o SubscriptionCloudProviderPtrOutput) Elem() SubscriptionCloudProviderOutput {
	return o.ApplyT(func(v *SubscriptionCloudProvider) SubscriptionCloudProvider {
		if v != nil {
			return *v
		}
		var ret SubscriptionCloudProvider
		return ret
	}).(SubscriptionCloudProviderOutput)
}

// Cloud account identifier. Default: Redis Labs internal cloud account
// (using Cloud Account ID = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created
// only with Redis Labs internal cloud account
func (o SubscriptionCloudProviderPtrOutput) CloudAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudProvider) *string {
		if v == nil {
			return nil
		}
		return v.CloudAccountId
	}).(pulumi.StringPtrOutput)
}

// The cloud provider to use with the subscription, (either `AWS` or `GCP`). Default: ‘AWS’
func (o SubscriptionCloudProviderPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCloudProvider) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// A region object, documented below
func (o SubscriptionCloudProviderPtrOutput) Regions() SubscriptionCloudProviderRegionArrayOutput {
	return o.ApplyT(func(v *SubscriptionCloudProvider) []SubscriptionCloudProviderRegion {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(SubscriptionCloudProviderRegionArrayOutput)
}

type SubscriptionCloudProviderRegion struct {
	// Support deployment on multiple availability zones within the selected region. Default: ‘false’
	MultipleAvailabilityZones *bool `pulumi:"multipleAvailabilityZones"`
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr string `pulumi:"networkingDeploymentCidr"`
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC
	// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
	// within the hosting account.
	NetworkingVpcId *string `pulumi:"networkingVpcId"`
	// List of generated network configuration
	Networks []SubscriptionCloudProviderRegionNetwork `pulumi:"networks"`
	// Availability zones deployment preferences (for the selected provider & region). If multipleAvailabilityZones is set to 'true', select three availability zones from the list. If you don't want to specify preferred avaialbility zones, set this attribute to an empty list ('[]').
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	// Deployment region as defined by cloud provider
	Region string `pulumi:"region"`
}

// SubscriptionCloudProviderRegionInput is an input type that accepts SubscriptionCloudProviderRegionArgs and SubscriptionCloudProviderRegionOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderRegionInput` via:
//
//	SubscriptionCloudProviderRegionArgs{...}
type SubscriptionCloudProviderRegionInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderRegionOutput() SubscriptionCloudProviderRegionOutput
	ToSubscriptionCloudProviderRegionOutputWithContext(context.Context) SubscriptionCloudProviderRegionOutput
}

type SubscriptionCloudProviderRegionArgs struct {
	// Support deployment on multiple availability zones within the selected region. Default: ‘false’
	MultipleAvailabilityZones pulumi.BoolPtrInput `pulumi:"multipleAvailabilityZones"`
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr pulumi.StringInput `pulumi:"networkingDeploymentCidr"`
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC
	// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
	// within the hosting account.
	NetworkingVpcId pulumi.StringPtrInput `pulumi:"networkingVpcId"`
	// List of generated network configuration
	Networks SubscriptionCloudProviderRegionNetworkArrayInput `pulumi:"networks"`
	// Availability zones deployment preferences (for the selected provider & region). If multipleAvailabilityZones is set to 'true', select three availability zones from the list. If you don't want to specify preferred avaialbility zones, set this attribute to an empty list ('[]').
	PreferredAvailabilityZones pulumi.StringArrayInput `pulumi:"preferredAvailabilityZones"`
	// Deployment region as defined by cloud provider
	Region pulumi.StringInput `pulumi:"region"`
}

func (SubscriptionCloudProviderRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProviderRegion)(nil)).Elem()
}

func (i SubscriptionCloudProviderRegionArgs) ToSubscriptionCloudProviderRegionOutput() SubscriptionCloudProviderRegionOutput {
	return i.ToSubscriptionCloudProviderRegionOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderRegionArgs) ToSubscriptionCloudProviderRegionOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderRegionOutput)
}

// SubscriptionCloudProviderRegionArrayInput is an input type that accepts SubscriptionCloudProviderRegionArray and SubscriptionCloudProviderRegionArrayOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderRegionArrayInput` via:
//
//	SubscriptionCloudProviderRegionArray{ SubscriptionCloudProviderRegionArgs{...} }
type SubscriptionCloudProviderRegionArrayInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderRegionArrayOutput() SubscriptionCloudProviderRegionArrayOutput
	ToSubscriptionCloudProviderRegionArrayOutputWithContext(context.Context) SubscriptionCloudProviderRegionArrayOutput
}

type SubscriptionCloudProviderRegionArray []SubscriptionCloudProviderRegionInput

func (SubscriptionCloudProviderRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionCloudProviderRegion)(nil)).Elem()
}

func (i SubscriptionCloudProviderRegionArray) ToSubscriptionCloudProviderRegionArrayOutput() SubscriptionCloudProviderRegionArrayOutput {
	return i.ToSubscriptionCloudProviderRegionArrayOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderRegionArray) ToSubscriptionCloudProviderRegionArrayOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderRegionArrayOutput)
}

type SubscriptionCloudProviderRegionOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProviderRegion)(nil)).Elem()
}

func (o SubscriptionCloudProviderRegionOutput) ToSubscriptionCloudProviderRegionOutput() SubscriptionCloudProviderRegionOutput {
	return o
}

func (o SubscriptionCloudProviderRegionOutput) ToSubscriptionCloudProviderRegionOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionOutput {
	return o
}

// Support deployment on multiple availability zones within the selected region. Default: ‘false’
func (o SubscriptionCloudProviderRegionOutput) MultipleAvailabilityZones() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) *bool { return v.MultipleAvailabilityZones }).(pulumi.BoolPtrOutput)
}

// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
func (o SubscriptionCloudProviderRegionOutput) NetworkingDeploymentCidr() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) string { return v.NetworkingDeploymentCidr }).(pulumi.StringOutput)
}

// Either an existing VPC Id (already exists in the specific region) or create a new VPC
// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
// within the hosting account.
func (o SubscriptionCloudProviderRegionOutput) NetworkingVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) *string { return v.NetworkingVpcId }).(pulumi.StringPtrOutput)
}

// List of generated network configuration
func (o SubscriptionCloudProviderRegionOutput) Networks() SubscriptionCloudProviderRegionNetworkArrayOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) []SubscriptionCloudProviderRegionNetwork { return v.Networks }).(SubscriptionCloudProviderRegionNetworkArrayOutput)
}

// Availability zones deployment preferences (for the selected provider & region). If multipleAvailabilityZones is set to 'true', select three availability zones from the list. If you don't want to specify preferred avaialbility zones, set this attribute to an empty list ('[]').
func (o SubscriptionCloudProviderRegionOutput) PreferredAvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) []string { return v.PreferredAvailabilityZones }).(pulumi.StringArrayOutput)
}

// Deployment region as defined by cloud provider
func (o SubscriptionCloudProviderRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegion) string { return v.Region }).(pulumi.StringOutput)
}

type SubscriptionCloudProviderRegionArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionCloudProviderRegion)(nil)).Elem()
}

func (o SubscriptionCloudProviderRegionArrayOutput) ToSubscriptionCloudProviderRegionArrayOutput() SubscriptionCloudProviderRegionArrayOutput {
	return o
}

func (o SubscriptionCloudProviderRegionArrayOutput) ToSubscriptionCloudProviderRegionArrayOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionArrayOutput {
	return o
}

func (o SubscriptionCloudProviderRegionArrayOutput) Index(i pulumi.IntInput) SubscriptionCloudProviderRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionCloudProviderRegion {
		return vs[0].([]SubscriptionCloudProviderRegion)[vs[1].(int)]
	}).(SubscriptionCloudProviderRegionOutput)
}

type SubscriptionCloudProviderRegionNetwork struct {
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr *string `pulumi:"networkingDeploymentCidr"`
	// The subnet that the subscription deploys into
	NetworkingSubnetId *string `pulumi:"networkingSubnetId"`
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC
	// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
	// within the hosting account.
	NetworkingVpcId *string `pulumi:"networkingVpcId"`
}

// SubscriptionCloudProviderRegionNetworkInput is an input type that accepts SubscriptionCloudProviderRegionNetworkArgs and SubscriptionCloudProviderRegionNetworkOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderRegionNetworkInput` via:
//
//	SubscriptionCloudProviderRegionNetworkArgs{...}
type SubscriptionCloudProviderRegionNetworkInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderRegionNetworkOutput() SubscriptionCloudProviderRegionNetworkOutput
	ToSubscriptionCloudProviderRegionNetworkOutputWithContext(context.Context) SubscriptionCloudProviderRegionNetworkOutput
}

type SubscriptionCloudProviderRegionNetworkArgs struct {
	// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
	NetworkingDeploymentCidr pulumi.StringPtrInput `pulumi:"networkingDeploymentCidr"`
	// The subnet that the subscription deploys into
	NetworkingSubnetId pulumi.StringPtrInput `pulumi:"networkingSubnetId"`
	// Either an existing VPC Id (already exists in the specific region) or create a new VPC
	// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
	// within the hosting account.
	NetworkingVpcId pulumi.StringPtrInput `pulumi:"networkingVpcId"`
}

func (SubscriptionCloudProviderRegionNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (i SubscriptionCloudProviderRegionNetworkArgs) ToSubscriptionCloudProviderRegionNetworkOutput() SubscriptionCloudProviderRegionNetworkOutput {
	return i.ToSubscriptionCloudProviderRegionNetworkOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderRegionNetworkArgs) ToSubscriptionCloudProviderRegionNetworkOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderRegionNetworkOutput)
}

// SubscriptionCloudProviderRegionNetworkArrayInput is an input type that accepts SubscriptionCloudProviderRegionNetworkArray and SubscriptionCloudProviderRegionNetworkArrayOutput values.
// You can construct a concrete instance of `SubscriptionCloudProviderRegionNetworkArrayInput` via:
//
//	SubscriptionCloudProviderRegionNetworkArray{ SubscriptionCloudProviderRegionNetworkArgs{...} }
type SubscriptionCloudProviderRegionNetworkArrayInput interface {
	pulumi.Input

	ToSubscriptionCloudProviderRegionNetworkArrayOutput() SubscriptionCloudProviderRegionNetworkArrayOutput
	ToSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(context.Context) SubscriptionCloudProviderRegionNetworkArrayOutput
}

type SubscriptionCloudProviderRegionNetworkArray []SubscriptionCloudProviderRegionNetworkInput

func (SubscriptionCloudProviderRegionNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (i SubscriptionCloudProviderRegionNetworkArray) ToSubscriptionCloudProviderRegionNetworkArrayOutput() SubscriptionCloudProviderRegionNetworkArrayOutput {
	return i.ToSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(context.Background())
}

func (i SubscriptionCloudProviderRegionNetworkArray) ToSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCloudProviderRegionNetworkArrayOutput)
}

type SubscriptionCloudProviderRegionNetworkOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderRegionNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (o SubscriptionCloudProviderRegionNetworkOutput) ToSubscriptionCloudProviderRegionNetworkOutput() SubscriptionCloudProviderRegionNetworkOutput {
	return o
}

func (o SubscriptionCloudProviderRegionNetworkOutput) ToSubscriptionCloudProviderRegionNetworkOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionNetworkOutput {
	return o
}

// Deployment CIDR mask. The total number of bits must be 24 (x.x.x.x/24)
func (o SubscriptionCloudProviderRegionNetworkOutput) NetworkingDeploymentCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegionNetwork) *string { return v.NetworkingDeploymentCidr }).(pulumi.StringPtrOutput)
}

// The subnet that the subscription deploys into
func (o SubscriptionCloudProviderRegionNetworkOutput) NetworkingSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegionNetwork) *string { return v.NetworkingSubnetId }).(pulumi.StringPtrOutput)
}

// Either an existing VPC Id (already exists in the specific region) or create a new VPC
// (if no VPC is specified). VPC Identifier must be in a valid format (for example: ‘vpc-0125be68a4986384ad’) and existing
// within the hosting account.
func (o SubscriptionCloudProviderRegionNetworkOutput) NetworkingVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionCloudProviderRegionNetwork) *string { return v.NetworkingVpcId }).(pulumi.StringPtrOutput)
}

type SubscriptionCloudProviderRegionNetworkArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionCloudProviderRegionNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (o SubscriptionCloudProviderRegionNetworkArrayOutput) ToSubscriptionCloudProviderRegionNetworkArrayOutput() SubscriptionCloudProviderRegionNetworkArrayOutput {
	return o
}

func (o SubscriptionCloudProviderRegionNetworkArrayOutput) ToSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(ctx context.Context) SubscriptionCloudProviderRegionNetworkArrayOutput {
	return o
}

func (o SubscriptionCloudProviderRegionNetworkArrayOutput) Index(i pulumi.IntInput) SubscriptionCloudProviderRegionNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionCloudProviderRegionNetwork {
		return vs[0].([]SubscriptionCloudProviderRegionNetwork)[vs[1].(int)]
	}).(SubscriptionCloudProviderRegionNetworkOutput)
}

type SubscriptionCreationPlan struct {
	// Relevant only to ram-and-flash clusters
	// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
	// be the maximum average item size defined in one of your databases.  Default: 1000
	AverageItemSizeInBytes *int `pulumi:"averageItemSizeInBytes"`
	// Maximum memory usage that will be used for your largest planned database.
	MemoryLimitInGb float64 `pulumi:"memoryLimitInGb"`
	// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
	// Example: `modules = ["RedisJSON", RedisBloom"]`
	Modules []string `pulumi:"modules"`
	// The planned number of databases in the subscription
	Quantity int `pulumi:"quantity"`
	// Databases replication. Set to `true` if any of your databases will use replication
	Replication bool `pulumi:"replication"`
	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	SupportOssClusterApi *bool `pulumi:"supportOssClusterApi"`
	// Throughput measurement method that will be used by your databases, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy string `pulumi:"throughputMeasurementBy"`
	// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
	ThroughputMeasurementValue int `pulumi:"throughputMeasurementValue"`
}

// SubscriptionCreationPlanInput is an input type that accepts SubscriptionCreationPlanArgs and SubscriptionCreationPlanOutput values.
// You can construct a concrete instance of `SubscriptionCreationPlanInput` via:
//
//	SubscriptionCreationPlanArgs{...}
type SubscriptionCreationPlanInput interface {
	pulumi.Input

	ToSubscriptionCreationPlanOutput() SubscriptionCreationPlanOutput
	ToSubscriptionCreationPlanOutputWithContext(context.Context) SubscriptionCreationPlanOutput
}

type SubscriptionCreationPlanArgs struct {
	// Relevant only to ram-and-flash clusters
	// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
	// be the maximum average item size defined in one of your databases.  Default: 1000
	AverageItemSizeInBytes pulumi.IntPtrInput `pulumi:"averageItemSizeInBytes"`
	// Maximum memory usage that will be used for your largest planned database.
	MemoryLimitInGb pulumi.Float64Input `pulumi:"memoryLimitInGb"`
	// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
	// Example: `modules = ["RedisJSON", RedisBloom"]`
	Modules pulumi.StringArrayInput `pulumi:"modules"`
	// The planned number of databases in the subscription
	Quantity pulumi.IntInput `pulumi:"quantity"`
	// Databases replication. Set to `true` if any of your databases will use replication
	Replication pulumi.BoolInput `pulumi:"replication"`
	// Support Redis open-source (OSS) Cluster API. Default: ‘false’
	SupportOssClusterApi pulumi.BoolPtrInput `pulumi:"supportOssClusterApi"`
	// Throughput measurement method that will be used by your databases, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy pulumi.StringInput `pulumi:"throughputMeasurementBy"`
	// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
	ThroughputMeasurementValue pulumi.IntInput `pulumi:"throughputMeasurementValue"`
}

func (SubscriptionCreationPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCreationPlan)(nil)).Elem()
}

func (i SubscriptionCreationPlanArgs) ToSubscriptionCreationPlanOutput() SubscriptionCreationPlanOutput {
	return i.ToSubscriptionCreationPlanOutputWithContext(context.Background())
}

func (i SubscriptionCreationPlanArgs) ToSubscriptionCreationPlanOutputWithContext(ctx context.Context) SubscriptionCreationPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCreationPlanOutput)
}

func (i SubscriptionCreationPlanArgs) ToSubscriptionCreationPlanPtrOutput() SubscriptionCreationPlanPtrOutput {
	return i.ToSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (i SubscriptionCreationPlanArgs) ToSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) SubscriptionCreationPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCreationPlanOutput).ToSubscriptionCreationPlanPtrOutputWithContext(ctx)
}

// SubscriptionCreationPlanPtrInput is an input type that accepts SubscriptionCreationPlanArgs, SubscriptionCreationPlanPtr and SubscriptionCreationPlanPtrOutput values.
// You can construct a concrete instance of `SubscriptionCreationPlanPtrInput` via:
//
//	        SubscriptionCreationPlanArgs{...}
//
//	or:
//
//	        nil
type SubscriptionCreationPlanPtrInput interface {
	pulumi.Input

	ToSubscriptionCreationPlanPtrOutput() SubscriptionCreationPlanPtrOutput
	ToSubscriptionCreationPlanPtrOutputWithContext(context.Context) SubscriptionCreationPlanPtrOutput
}

type subscriptionCreationPlanPtrType SubscriptionCreationPlanArgs

func SubscriptionCreationPlanPtr(v *SubscriptionCreationPlanArgs) SubscriptionCreationPlanPtrInput {
	return (*subscriptionCreationPlanPtrType)(v)
}

func (*subscriptionCreationPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCreationPlan)(nil)).Elem()
}

func (i *subscriptionCreationPlanPtrType) ToSubscriptionCreationPlanPtrOutput() SubscriptionCreationPlanPtrOutput {
	return i.ToSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (i *subscriptionCreationPlanPtrType) ToSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) SubscriptionCreationPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCreationPlanPtrOutput)
}

type SubscriptionCreationPlanOutput struct{ *pulumi.OutputState }

func (SubscriptionCreationPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionCreationPlan)(nil)).Elem()
}

func (o SubscriptionCreationPlanOutput) ToSubscriptionCreationPlanOutput() SubscriptionCreationPlanOutput {
	return o
}

func (o SubscriptionCreationPlanOutput) ToSubscriptionCreationPlanOutputWithContext(ctx context.Context) SubscriptionCreationPlanOutput {
	return o
}

func (o SubscriptionCreationPlanOutput) ToSubscriptionCreationPlanPtrOutput() SubscriptionCreationPlanPtrOutput {
	return o.ToSubscriptionCreationPlanPtrOutputWithContext(context.Background())
}

func (o SubscriptionCreationPlanOutput) ToSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) SubscriptionCreationPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionCreationPlan) *SubscriptionCreationPlan {
		return &v
	}).(SubscriptionCreationPlanPtrOutput)
}

// Relevant only to ram-and-flash clusters
// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
// be the maximum average item size defined in one of your databases.  Default: 1000
func (o SubscriptionCreationPlanOutput) AverageItemSizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) *int { return v.AverageItemSizeInBytes }).(pulumi.IntPtrOutput)
}

// Maximum memory usage that will be used for your largest planned database.
func (o SubscriptionCreationPlanOutput) MemoryLimitInGb() pulumi.Float64Output {
	return o.ApplyT(func(v SubscriptionCreationPlan) float64 { return v.MemoryLimitInGb }).(pulumi.Float64Output)
}

// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
// Example: `modules = ["RedisJSON", RedisBloom"]`
func (o SubscriptionCreationPlanOutput) Modules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) []string { return v.Modules }).(pulumi.StringArrayOutput)
}

// The planned number of databases in the subscription
func (o SubscriptionCreationPlanOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) int { return v.Quantity }).(pulumi.IntOutput)
}

// Databases replication. Set to `true` if any of your databases will use replication
func (o SubscriptionCreationPlanOutput) Replication() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) bool { return v.Replication }).(pulumi.BoolOutput)
}

// Support Redis open-source (OSS) Cluster API. Default: ‘false’
func (o SubscriptionCreationPlanOutput) SupportOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) *bool { return v.SupportOssClusterApi }).(pulumi.BoolPtrOutput)
}

// Throughput measurement method that will be used by your databases, (either ‘number-of-shards’ or ‘operations-per-second’)
func (o SubscriptionCreationPlanOutput) ThroughputMeasurementBy() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) string { return v.ThroughputMeasurementBy }).(pulumi.StringOutput)
}

// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
func (o SubscriptionCreationPlanOutput) ThroughputMeasurementValue() pulumi.IntOutput {
	return o.ApplyT(func(v SubscriptionCreationPlan) int { return v.ThroughputMeasurementValue }).(pulumi.IntOutput)
}

type SubscriptionCreationPlanPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionCreationPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCreationPlan)(nil)).Elem()
}

func (o SubscriptionCreationPlanPtrOutput) ToSubscriptionCreationPlanPtrOutput() SubscriptionCreationPlanPtrOutput {
	return o
}

func (o SubscriptionCreationPlanPtrOutput) ToSubscriptionCreationPlanPtrOutputWithContext(ctx context.Context) SubscriptionCreationPlanPtrOutput {
	return o
}

func (o SubscriptionCreationPlanPtrOutput) Elem() SubscriptionCreationPlanOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) SubscriptionCreationPlan {
		if v != nil {
			return *v
		}
		var ret SubscriptionCreationPlan
		return ret
	}).(SubscriptionCreationPlanOutput)
}

// Relevant only to ram-and-flash clusters
// Estimated average size (measured in bytes) of the items stored in the database. The value needs to
// be the maximum average item size defined in one of your databases.  Default: 1000
func (o SubscriptionCreationPlanPtrOutput) AverageItemSizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *int {
		if v == nil {
			return nil
		}
		return v.AverageItemSizeInBytes
	}).(pulumi.IntPtrOutput)
}

// Maximum memory usage that will be used for your largest planned database.
func (o SubscriptionCreationPlanPtrOutput) MemoryLimitInGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *float64 {
		if v == nil {
			return nil
		}
		return &v.MemoryLimitInGb
	}).(pulumi.Float64PtrOutput)
}

// a list of modules that will be used by the databases in this subscription. Not currently compatible with ‘ram-and-flash’ memory storage.
// Example: `modules = ["RedisJSON", RedisBloom"]`
func (o SubscriptionCreationPlanPtrOutput) Modules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) []string {
		if v == nil {
			return nil
		}
		return v.Modules
	}).(pulumi.StringArrayOutput)
}

// The planned number of databases in the subscription
func (o SubscriptionCreationPlanPtrOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *int {
		if v == nil {
			return nil
		}
		return &v.Quantity
	}).(pulumi.IntPtrOutput)
}

// Databases replication. Set to `true` if any of your databases will use replication
func (o SubscriptionCreationPlanPtrOutput) Replication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *bool {
		if v == nil {
			return nil
		}
		return &v.Replication
	}).(pulumi.BoolPtrOutput)
}

// Support Redis open-source (OSS) Cluster API. Default: ‘false’
func (o SubscriptionCreationPlanPtrOutput) SupportOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOssClusterApi
	}).(pulumi.BoolPtrOutput)
}

// Throughput measurement method that will be used by your databases, (either ‘number-of-shards’ or ‘operations-per-second’)
func (o SubscriptionCreationPlanPtrOutput) ThroughputMeasurementBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *string {
		if v == nil {
			return nil
		}
		return &v.ThroughputMeasurementBy
	}).(pulumi.StringPtrOutput)
}

// Throughput value that will be used by your databases (as applies to selected measurement method). The value needs to be the maximum throughput measurement value defined in one of your databases
func (o SubscriptionCreationPlanPtrOutput) ThroughputMeasurementValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionCreationPlan) *int {
		if v == nil {
			return nil
		}
		return &v.ThroughputMeasurementValue
	}).(pulumi.IntPtrOutput)
}

type SubscriptionDatabaseAlert struct {
	// Alert name
	Name string `pulumi:"name"`
	// Alert value
	Value int `pulumi:"value"`
}

// SubscriptionDatabaseAlertInput is an input type that accepts SubscriptionDatabaseAlertArgs and SubscriptionDatabaseAlertOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseAlertInput` via:
//
//	SubscriptionDatabaseAlertArgs{...}
type SubscriptionDatabaseAlertInput interface {
	pulumi.Input

	ToSubscriptionDatabaseAlertOutput() SubscriptionDatabaseAlertOutput
	ToSubscriptionDatabaseAlertOutputWithContext(context.Context) SubscriptionDatabaseAlertOutput
}

type SubscriptionDatabaseAlertArgs struct {
	// Alert name
	Name pulumi.StringInput `pulumi:"name"`
	// Alert value
	Value pulumi.IntInput `pulumi:"value"`
}

func (SubscriptionDatabaseAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDatabaseAlert)(nil)).Elem()
}

func (i SubscriptionDatabaseAlertArgs) ToSubscriptionDatabaseAlertOutput() SubscriptionDatabaseAlertOutput {
	return i.ToSubscriptionDatabaseAlertOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseAlertArgs) ToSubscriptionDatabaseAlertOutputWithContext(ctx context.Context) SubscriptionDatabaseAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseAlertOutput)
}

// SubscriptionDatabaseAlertArrayInput is an input type that accepts SubscriptionDatabaseAlertArray and SubscriptionDatabaseAlertArrayOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseAlertArrayInput` via:
//
//	SubscriptionDatabaseAlertArray{ SubscriptionDatabaseAlertArgs{...} }
type SubscriptionDatabaseAlertArrayInput interface {
	pulumi.Input

	ToSubscriptionDatabaseAlertArrayOutput() SubscriptionDatabaseAlertArrayOutput
	ToSubscriptionDatabaseAlertArrayOutputWithContext(context.Context) SubscriptionDatabaseAlertArrayOutput
}

type SubscriptionDatabaseAlertArray []SubscriptionDatabaseAlertInput

func (SubscriptionDatabaseAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionDatabaseAlert)(nil)).Elem()
}

func (i SubscriptionDatabaseAlertArray) ToSubscriptionDatabaseAlertArrayOutput() SubscriptionDatabaseAlertArrayOutput {
	return i.ToSubscriptionDatabaseAlertArrayOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseAlertArray) ToSubscriptionDatabaseAlertArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseAlertArrayOutput)
}

type SubscriptionDatabaseAlertOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDatabaseAlert)(nil)).Elem()
}

func (o SubscriptionDatabaseAlertOutput) ToSubscriptionDatabaseAlertOutput() SubscriptionDatabaseAlertOutput {
	return o
}

func (o SubscriptionDatabaseAlertOutput) ToSubscriptionDatabaseAlertOutputWithContext(ctx context.Context) SubscriptionDatabaseAlertOutput {
	return o
}

// Alert name
func (o SubscriptionDatabaseAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionDatabaseAlert) string { return v.Name }).(pulumi.StringOutput)
}

// Alert value
func (o SubscriptionDatabaseAlertOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v SubscriptionDatabaseAlert) int { return v.Value }).(pulumi.IntOutput)
}

type SubscriptionDatabaseAlertArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionDatabaseAlert)(nil)).Elem()
}

func (o SubscriptionDatabaseAlertArrayOutput) ToSubscriptionDatabaseAlertArrayOutput() SubscriptionDatabaseAlertArrayOutput {
	return o
}

func (o SubscriptionDatabaseAlertArrayOutput) ToSubscriptionDatabaseAlertArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseAlertArrayOutput {
	return o
}

func (o SubscriptionDatabaseAlertArrayOutput) Index(i pulumi.IntInput) SubscriptionDatabaseAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionDatabaseAlert {
		return vs[0].([]SubscriptionDatabaseAlert)[vs[1].(int)]
	}).(SubscriptionDatabaseAlertOutput)
}

type SubscriptionDatabaseModule struct {
	// Name of the Redis database module to enable
	Name string `pulumi:"name"`
}

// SubscriptionDatabaseModuleInput is an input type that accepts SubscriptionDatabaseModuleArgs and SubscriptionDatabaseModuleOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseModuleInput` via:
//
//	SubscriptionDatabaseModuleArgs{...}
type SubscriptionDatabaseModuleInput interface {
	pulumi.Input

	ToSubscriptionDatabaseModuleOutput() SubscriptionDatabaseModuleOutput
	ToSubscriptionDatabaseModuleOutputWithContext(context.Context) SubscriptionDatabaseModuleOutput
}

type SubscriptionDatabaseModuleArgs struct {
	// Name of the Redis database module to enable
	Name pulumi.StringInput `pulumi:"name"`
}

func (SubscriptionDatabaseModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDatabaseModule)(nil)).Elem()
}

func (i SubscriptionDatabaseModuleArgs) ToSubscriptionDatabaseModuleOutput() SubscriptionDatabaseModuleOutput {
	return i.ToSubscriptionDatabaseModuleOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseModuleArgs) ToSubscriptionDatabaseModuleOutputWithContext(ctx context.Context) SubscriptionDatabaseModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseModuleOutput)
}

// SubscriptionDatabaseModuleArrayInput is an input type that accepts SubscriptionDatabaseModuleArray and SubscriptionDatabaseModuleArrayOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseModuleArrayInput` via:
//
//	SubscriptionDatabaseModuleArray{ SubscriptionDatabaseModuleArgs{...} }
type SubscriptionDatabaseModuleArrayInput interface {
	pulumi.Input

	ToSubscriptionDatabaseModuleArrayOutput() SubscriptionDatabaseModuleArrayOutput
	ToSubscriptionDatabaseModuleArrayOutputWithContext(context.Context) SubscriptionDatabaseModuleArrayOutput
}

type SubscriptionDatabaseModuleArray []SubscriptionDatabaseModuleInput

func (SubscriptionDatabaseModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionDatabaseModule)(nil)).Elem()
}

func (i SubscriptionDatabaseModuleArray) ToSubscriptionDatabaseModuleArrayOutput() SubscriptionDatabaseModuleArrayOutput {
	return i.ToSubscriptionDatabaseModuleArrayOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseModuleArray) ToSubscriptionDatabaseModuleArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseModuleArrayOutput)
}

type SubscriptionDatabaseModuleOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionDatabaseModule)(nil)).Elem()
}

func (o SubscriptionDatabaseModuleOutput) ToSubscriptionDatabaseModuleOutput() SubscriptionDatabaseModuleOutput {
	return o
}

func (o SubscriptionDatabaseModuleOutput) ToSubscriptionDatabaseModuleOutputWithContext(ctx context.Context) SubscriptionDatabaseModuleOutput {
	return o
}

// Name of the Redis database module to enable
func (o SubscriptionDatabaseModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionDatabaseModule) string { return v.Name }).(pulumi.StringOutput)
}

type SubscriptionDatabaseModuleArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionDatabaseModule)(nil)).Elem()
}

func (o SubscriptionDatabaseModuleArrayOutput) ToSubscriptionDatabaseModuleArrayOutput() SubscriptionDatabaseModuleArrayOutput {
	return o
}

func (o SubscriptionDatabaseModuleArrayOutput) ToSubscriptionDatabaseModuleArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseModuleArrayOutput {
	return o
}

func (o SubscriptionDatabaseModuleArrayOutput) Index(i pulumi.IntInput) SubscriptionDatabaseModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionDatabaseModule {
		return vs[0].([]SubscriptionDatabaseModule)[vs[1].(int)]
	}).(SubscriptionDatabaseModuleOutput)
}

type GetDataPersistenceDataPersistence struct {
	// A meaningful description of the data persistence option.
	Description string `pulumi:"description"`
	// The identifier of the data persistence option.
	Name string `pulumi:"name"`
}

// GetDataPersistenceDataPersistenceInput is an input type that accepts GetDataPersistenceDataPersistenceArgs and GetDataPersistenceDataPersistenceOutput values.
// You can construct a concrete instance of `GetDataPersistenceDataPersistenceInput` via:
//
//	GetDataPersistenceDataPersistenceArgs{...}
type GetDataPersistenceDataPersistenceInput interface {
	pulumi.Input

	ToGetDataPersistenceDataPersistenceOutput() GetDataPersistenceDataPersistenceOutput
	ToGetDataPersistenceDataPersistenceOutputWithContext(context.Context) GetDataPersistenceDataPersistenceOutput
}

type GetDataPersistenceDataPersistenceArgs struct {
	// A meaningful description of the data persistence option.
	Description pulumi.StringInput `pulumi:"description"`
	// The identifier of the data persistence option.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataPersistenceDataPersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataPersistenceDataPersistence)(nil)).Elem()
}

func (i GetDataPersistenceDataPersistenceArgs) ToGetDataPersistenceDataPersistenceOutput() GetDataPersistenceDataPersistenceOutput {
	return i.ToGetDataPersistenceDataPersistenceOutputWithContext(context.Background())
}

func (i GetDataPersistenceDataPersistenceArgs) ToGetDataPersistenceDataPersistenceOutputWithContext(ctx context.Context) GetDataPersistenceDataPersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataPersistenceDataPersistenceOutput)
}

// GetDataPersistenceDataPersistenceArrayInput is an input type that accepts GetDataPersistenceDataPersistenceArray and GetDataPersistenceDataPersistenceArrayOutput values.
// You can construct a concrete instance of `GetDataPersistenceDataPersistenceArrayInput` via:
//
//	GetDataPersistenceDataPersistenceArray{ GetDataPersistenceDataPersistenceArgs{...} }
type GetDataPersistenceDataPersistenceArrayInput interface {
	pulumi.Input

	ToGetDataPersistenceDataPersistenceArrayOutput() GetDataPersistenceDataPersistenceArrayOutput
	ToGetDataPersistenceDataPersistenceArrayOutputWithContext(context.Context) GetDataPersistenceDataPersistenceArrayOutput
}

type GetDataPersistenceDataPersistenceArray []GetDataPersistenceDataPersistenceInput

func (GetDataPersistenceDataPersistenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataPersistenceDataPersistence)(nil)).Elem()
}

func (i GetDataPersistenceDataPersistenceArray) ToGetDataPersistenceDataPersistenceArrayOutput() GetDataPersistenceDataPersistenceArrayOutput {
	return i.ToGetDataPersistenceDataPersistenceArrayOutputWithContext(context.Background())
}

func (i GetDataPersistenceDataPersistenceArray) ToGetDataPersistenceDataPersistenceArrayOutputWithContext(ctx context.Context) GetDataPersistenceDataPersistenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataPersistenceDataPersistenceArrayOutput)
}

type GetDataPersistenceDataPersistenceOutput struct{ *pulumi.OutputState }

func (GetDataPersistenceDataPersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataPersistenceDataPersistence)(nil)).Elem()
}

func (o GetDataPersistenceDataPersistenceOutput) ToGetDataPersistenceDataPersistenceOutput() GetDataPersistenceDataPersistenceOutput {
	return o
}

func (o GetDataPersistenceDataPersistenceOutput) ToGetDataPersistenceDataPersistenceOutputWithContext(ctx context.Context) GetDataPersistenceDataPersistenceOutput {
	return o
}

// A meaningful description of the data persistence option.
func (o GetDataPersistenceDataPersistenceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataPersistenceDataPersistence) string { return v.Description }).(pulumi.StringOutput)
}

// The identifier of the data persistence option.
func (o GetDataPersistenceDataPersistenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataPersistenceDataPersistence) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataPersistenceDataPersistenceArrayOutput struct{ *pulumi.OutputState }

func (GetDataPersistenceDataPersistenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataPersistenceDataPersistence)(nil)).Elem()
}

func (o GetDataPersistenceDataPersistenceArrayOutput) ToGetDataPersistenceDataPersistenceArrayOutput() GetDataPersistenceDataPersistenceArrayOutput {
	return o
}

func (o GetDataPersistenceDataPersistenceArrayOutput) ToGetDataPersistenceDataPersistenceArrayOutputWithContext(ctx context.Context) GetDataPersistenceDataPersistenceArrayOutput {
	return o
}

func (o GetDataPersistenceDataPersistenceArrayOutput) Index(i pulumi.IntInput) GetDataPersistenceDataPersistenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataPersistenceDataPersistence {
		return vs[0].([]GetDataPersistenceDataPersistence)[vs[1].(int)]
	}).(GetDataPersistenceDataPersistenceOutput)
}

type GetDatabaseAlert struct {
	// The name of the database to filter returned databases
	Name string `pulumi:"name"`
	// The alert value
	Value int `pulumi:"value"`
}

// GetDatabaseAlertInput is an input type that accepts GetDatabaseAlertArgs and GetDatabaseAlertOutput values.
// You can construct a concrete instance of `GetDatabaseAlertInput` via:
//
//	GetDatabaseAlertArgs{...}
type GetDatabaseAlertInput interface {
	pulumi.Input

	ToGetDatabaseAlertOutput() GetDatabaseAlertOutput
	ToGetDatabaseAlertOutputWithContext(context.Context) GetDatabaseAlertOutput
}

type GetDatabaseAlertArgs struct {
	// The name of the database to filter returned databases
	Name pulumi.StringInput `pulumi:"name"`
	// The alert value
	Value pulumi.IntInput `pulumi:"value"`
}

func (GetDatabaseAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseAlert)(nil)).Elem()
}

func (i GetDatabaseAlertArgs) ToGetDatabaseAlertOutput() GetDatabaseAlertOutput {
	return i.ToGetDatabaseAlertOutputWithContext(context.Background())
}

func (i GetDatabaseAlertArgs) ToGetDatabaseAlertOutputWithContext(ctx context.Context) GetDatabaseAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseAlertOutput)
}

// GetDatabaseAlertArrayInput is an input type that accepts GetDatabaseAlertArray and GetDatabaseAlertArrayOutput values.
// You can construct a concrete instance of `GetDatabaseAlertArrayInput` via:
//
//	GetDatabaseAlertArray{ GetDatabaseAlertArgs{...} }
type GetDatabaseAlertArrayInput interface {
	pulumi.Input

	ToGetDatabaseAlertArrayOutput() GetDatabaseAlertArrayOutput
	ToGetDatabaseAlertArrayOutputWithContext(context.Context) GetDatabaseAlertArrayOutput
}

type GetDatabaseAlertArray []GetDatabaseAlertInput

func (GetDatabaseAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseAlert)(nil)).Elem()
}

func (i GetDatabaseAlertArray) ToGetDatabaseAlertArrayOutput() GetDatabaseAlertArrayOutput {
	return i.ToGetDatabaseAlertArrayOutputWithContext(context.Background())
}

func (i GetDatabaseAlertArray) ToGetDatabaseAlertArrayOutputWithContext(ctx context.Context) GetDatabaseAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseAlertArrayOutput)
}

type GetDatabaseAlertOutput struct{ *pulumi.OutputState }

func (GetDatabaseAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseAlert)(nil)).Elem()
}

func (o GetDatabaseAlertOutput) ToGetDatabaseAlertOutput() GetDatabaseAlertOutput {
	return o
}

func (o GetDatabaseAlertOutput) ToGetDatabaseAlertOutputWithContext(ctx context.Context) GetDatabaseAlertOutput {
	return o
}

// The name of the database to filter returned databases
func (o GetDatabaseAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseAlert) string { return v.Name }).(pulumi.StringOutput)
}

// The alert value
func (o GetDatabaseAlertOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatabaseAlert) int { return v.Value }).(pulumi.IntOutput)
}

type GetDatabaseAlertArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseAlert)(nil)).Elem()
}

func (o GetDatabaseAlertArrayOutput) ToGetDatabaseAlertArrayOutput() GetDatabaseAlertArrayOutput {
	return o
}

func (o GetDatabaseAlertArrayOutput) ToGetDatabaseAlertArrayOutputWithContext(ctx context.Context) GetDatabaseAlertArrayOutput {
	return o
}

func (o GetDatabaseAlertArrayOutput) Index(i pulumi.IntInput) GetDatabaseAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseAlert {
		return vs[0].([]GetDatabaseAlert)[vs[1].(int)]
	}).(GetDatabaseAlertOutput)
}

type GetDatabaseModule struct {
	// The name of the database to filter returned databases
	Name string `pulumi:"name"`
}

// GetDatabaseModuleInput is an input type that accepts GetDatabaseModuleArgs and GetDatabaseModuleOutput values.
// You can construct a concrete instance of `GetDatabaseModuleInput` via:
//
//	GetDatabaseModuleArgs{...}
type GetDatabaseModuleInput interface {
	pulumi.Input

	ToGetDatabaseModuleOutput() GetDatabaseModuleOutput
	ToGetDatabaseModuleOutputWithContext(context.Context) GetDatabaseModuleOutput
}

type GetDatabaseModuleArgs struct {
	// The name of the database to filter returned databases
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDatabaseModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseModule)(nil)).Elem()
}

func (i GetDatabaseModuleArgs) ToGetDatabaseModuleOutput() GetDatabaseModuleOutput {
	return i.ToGetDatabaseModuleOutputWithContext(context.Background())
}

func (i GetDatabaseModuleArgs) ToGetDatabaseModuleOutputWithContext(ctx context.Context) GetDatabaseModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseModuleOutput)
}

// GetDatabaseModuleArrayInput is an input type that accepts GetDatabaseModuleArray and GetDatabaseModuleArrayOutput values.
// You can construct a concrete instance of `GetDatabaseModuleArrayInput` via:
//
//	GetDatabaseModuleArray{ GetDatabaseModuleArgs{...} }
type GetDatabaseModuleArrayInput interface {
	pulumi.Input

	ToGetDatabaseModuleArrayOutput() GetDatabaseModuleArrayOutput
	ToGetDatabaseModuleArrayOutputWithContext(context.Context) GetDatabaseModuleArrayOutput
}

type GetDatabaseModuleArray []GetDatabaseModuleInput

func (GetDatabaseModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseModule)(nil)).Elem()
}

func (i GetDatabaseModuleArray) ToGetDatabaseModuleArrayOutput() GetDatabaseModuleArrayOutput {
	return i.ToGetDatabaseModuleArrayOutputWithContext(context.Background())
}

func (i GetDatabaseModuleArray) ToGetDatabaseModuleArrayOutputWithContext(ctx context.Context) GetDatabaseModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseModuleArrayOutput)
}

type GetDatabaseModuleOutput struct{ *pulumi.OutputState }

func (GetDatabaseModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseModule)(nil)).Elem()
}

func (o GetDatabaseModuleOutput) ToGetDatabaseModuleOutput() GetDatabaseModuleOutput {
	return o
}

func (o GetDatabaseModuleOutput) ToGetDatabaseModuleOutputWithContext(ctx context.Context) GetDatabaseModuleOutput {
	return o
}

// The name of the database to filter returned databases
func (o GetDatabaseModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseModule) string { return v.Name }).(pulumi.StringOutput)
}

type GetDatabaseModuleArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseModule)(nil)).Elem()
}

func (o GetDatabaseModuleArrayOutput) ToGetDatabaseModuleArrayOutput() GetDatabaseModuleArrayOutput {
	return o
}

func (o GetDatabaseModuleArrayOutput) ToGetDatabaseModuleArrayOutputWithContext(ctx context.Context) GetDatabaseModuleArrayOutput {
	return o
}

func (o GetDatabaseModuleArrayOutput) Index(i pulumi.IntInput) GetDatabaseModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseModule {
		return vs[0].([]GetDatabaseModule)[vs[1].(int)]
	}).(GetDatabaseModuleOutput)
}

type GetDatabaseModulesModule struct {
	// A meaningful description of the database module
	Description string `pulumi:"description"`
	// The identifier assigned by the database module
	Name string `pulumi:"name"`
}

// GetDatabaseModulesModuleInput is an input type that accepts GetDatabaseModulesModuleArgs and GetDatabaseModulesModuleOutput values.
// You can construct a concrete instance of `GetDatabaseModulesModuleInput` via:
//
//	GetDatabaseModulesModuleArgs{...}
type GetDatabaseModulesModuleInput interface {
	pulumi.Input

	ToGetDatabaseModulesModuleOutput() GetDatabaseModulesModuleOutput
	ToGetDatabaseModulesModuleOutputWithContext(context.Context) GetDatabaseModulesModuleOutput
}

type GetDatabaseModulesModuleArgs struct {
	// A meaningful description of the database module
	Description pulumi.StringInput `pulumi:"description"`
	// The identifier assigned by the database module
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDatabaseModulesModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseModulesModule)(nil)).Elem()
}

func (i GetDatabaseModulesModuleArgs) ToGetDatabaseModulesModuleOutput() GetDatabaseModulesModuleOutput {
	return i.ToGetDatabaseModulesModuleOutputWithContext(context.Background())
}

func (i GetDatabaseModulesModuleArgs) ToGetDatabaseModulesModuleOutputWithContext(ctx context.Context) GetDatabaseModulesModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseModulesModuleOutput)
}

// GetDatabaseModulesModuleArrayInput is an input type that accepts GetDatabaseModulesModuleArray and GetDatabaseModulesModuleArrayOutput values.
// You can construct a concrete instance of `GetDatabaseModulesModuleArrayInput` via:
//
//	GetDatabaseModulesModuleArray{ GetDatabaseModulesModuleArgs{...} }
type GetDatabaseModulesModuleArrayInput interface {
	pulumi.Input

	ToGetDatabaseModulesModuleArrayOutput() GetDatabaseModulesModuleArrayOutput
	ToGetDatabaseModulesModuleArrayOutputWithContext(context.Context) GetDatabaseModulesModuleArrayOutput
}

type GetDatabaseModulesModuleArray []GetDatabaseModulesModuleInput

func (GetDatabaseModulesModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseModulesModule)(nil)).Elem()
}

func (i GetDatabaseModulesModuleArray) ToGetDatabaseModulesModuleArrayOutput() GetDatabaseModulesModuleArrayOutput {
	return i.ToGetDatabaseModulesModuleArrayOutputWithContext(context.Background())
}

func (i GetDatabaseModulesModuleArray) ToGetDatabaseModulesModuleArrayOutputWithContext(ctx context.Context) GetDatabaseModulesModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseModulesModuleArrayOutput)
}

type GetDatabaseModulesModuleOutput struct{ *pulumi.OutputState }

func (GetDatabaseModulesModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseModulesModule)(nil)).Elem()
}

func (o GetDatabaseModulesModuleOutput) ToGetDatabaseModulesModuleOutput() GetDatabaseModulesModuleOutput {
	return o
}

func (o GetDatabaseModulesModuleOutput) ToGetDatabaseModulesModuleOutputWithContext(ctx context.Context) GetDatabaseModulesModuleOutput {
	return o
}

// A meaningful description of the database module
func (o GetDatabaseModulesModuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseModulesModule) string { return v.Description }).(pulumi.StringOutput)
}

// The identifier assigned by the database module
func (o GetDatabaseModulesModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseModulesModule) string { return v.Name }).(pulumi.StringOutput)
}

type GetDatabaseModulesModuleArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseModulesModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseModulesModule)(nil)).Elem()
}

func (o GetDatabaseModulesModuleArrayOutput) ToGetDatabaseModulesModuleArrayOutput() GetDatabaseModulesModuleArrayOutput {
	return o
}

func (o GetDatabaseModulesModuleArrayOutput) ToGetDatabaseModulesModuleArrayOutputWithContext(ctx context.Context) GetDatabaseModulesModuleArrayOutput {
	return o
}

func (o GetDatabaseModulesModuleArrayOutput) Index(i pulumi.IntInput) GetDatabaseModulesModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseModulesModule {
		return vs[0].([]GetDatabaseModulesModule)[vs[1].(int)]
	}).(GetDatabaseModulesModuleOutput)
}

type GetRegionsRegion struct {
	// The identifier assigned by the cloud provider, (for example `eu-west-1` for `AWS`)
	Name string `pulumi:"name"`
	// The name of the cloud provider to filter returned regions, (accepted values are `AWS` or `GCP`).
	ProviderName string `pulumi:"providerName"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The identifier assigned by the cloud provider, (for example `eu-west-1` for `AWS`)
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the cloud provider to filter returned regions, (accepted values are `AWS` or `GCP`).
	ProviderName pulumi.StringInput `pulumi:"providerName"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The identifier assigned by the cloud provider, (for example `eu-west-1` for `AWS`)
func (o GetRegionsRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the cloud provider to filter returned regions, (accepted values are `AWS` or `GCP`).
func (o GetRegionsRegionOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.ProviderName }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetSubscriptionCloudProvider struct {
	// Cloud account identifier, (A Cloud Account Id = 1 implies using Redis Labs internal cloud account)
	CloudAccountId string `pulumi:"cloudAccountId"`
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
	Provider string `pulumi:"provider"`
	// Deployment region as defined by cloud provider
	Regions []GetSubscriptionCloudProviderRegion `pulumi:"regions"`
}

// GetSubscriptionCloudProviderInput is an input type that accepts GetSubscriptionCloudProviderArgs and GetSubscriptionCloudProviderOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderInput` via:
//
//	GetSubscriptionCloudProviderArgs{...}
type GetSubscriptionCloudProviderInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderOutput() GetSubscriptionCloudProviderOutput
	ToGetSubscriptionCloudProviderOutputWithContext(context.Context) GetSubscriptionCloudProviderOutput
}

type GetSubscriptionCloudProviderArgs struct {
	// Cloud account identifier, (A Cloud Account Id = 1 implies using Redis Labs internal cloud account)
	CloudAccountId pulumi.StringInput `pulumi:"cloudAccountId"`
	// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
	Provider pulumi.StringInput `pulumi:"provider"`
	// Deployment region as defined by cloud provider
	Regions GetSubscriptionCloudProviderRegionArrayInput `pulumi:"regions"`
}

func (GetSubscriptionCloudProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProvider)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderArgs) ToGetSubscriptionCloudProviderOutput() GetSubscriptionCloudProviderOutput {
	return i.ToGetSubscriptionCloudProviderOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderArgs) ToGetSubscriptionCloudProviderOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderOutput)
}

// GetSubscriptionCloudProviderArrayInput is an input type that accepts GetSubscriptionCloudProviderArray and GetSubscriptionCloudProviderArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderArrayInput` via:
//
//	GetSubscriptionCloudProviderArray{ GetSubscriptionCloudProviderArgs{...} }
type GetSubscriptionCloudProviderArrayInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderArrayOutput() GetSubscriptionCloudProviderArrayOutput
	ToGetSubscriptionCloudProviderArrayOutputWithContext(context.Context) GetSubscriptionCloudProviderArrayOutput
}

type GetSubscriptionCloudProviderArray []GetSubscriptionCloudProviderInput

func (GetSubscriptionCloudProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProvider)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderArray) ToGetSubscriptionCloudProviderArrayOutput() GetSubscriptionCloudProviderArrayOutput {
	return i.ToGetSubscriptionCloudProviderArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderArray) ToGetSubscriptionCloudProviderArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderArrayOutput)
}

type GetSubscriptionCloudProviderOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProvider)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderOutput) ToGetSubscriptionCloudProviderOutput() GetSubscriptionCloudProviderOutput {
	return o
}

func (o GetSubscriptionCloudProviderOutput) ToGetSubscriptionCloudProviderOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderOutput {
	return o
}

// Cloud account identifier, (A Cloud Account Id = 1 implies using Redis Labs internal cloud account)
func (o GetSubscriptionCloudProviderOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProvider) string { return v.CloudAccountId }).(pulumi.StringOutput)
}

// The cloud provider to use with the subscription, (either `AWS` or `GCP`)
func (o GetSubscriptionCloudProviderOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProvider) string { return v.Provider }).(pulumi.StringOutput)
}

// Deployment region as defined by cloud provider
func (o GetSubscriptionCloudProviderOutput) Regions() GetSubscriptionCloudProviderRegionArrayOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProvider) []GetSubscriptionCloudProviderRegion { return v.Regions }).(GetSubscriptionCloudProviderRegionArrayOutput)
}

type GetSubscriptionCloudProviderArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProvider)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderArrayOutput) ToGetSubscriptionCloudProviderArrayOutput() GetSubscriptionCloudProviderArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderArrayOutput) ToGetSubscriptionCloudProviderArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderArrayOutput) Index(i pulumi.IntInput) GetSubscriptionCloudProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionCloudProvider {
		return vs[0].([]GetSubscriptionCloudProvider)[vs[1].(int)]
	}).(GetSubscriptionCloudProviderOutput)
}

type GetSubscriptionCloudProviderRegion struct {
	// Support deployment on multiple availability zones within the selected region
	MultipleAvailabilityZones bool `pulumi:"multipleAvailabilityZones"`
	// VPC id for the generated network
	NetworkingVpcId string `pulumi:"networkingVpcId"`
	// List of generated network configuration
	Networks []GetSubscriptionCloudProviderRegionNetwork `pulumi:"networks"`
	// List of availability zones used
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	// Deployment region as defined by cloud provider
	Region string `pulumi:"region"`
}

// GetSubscriptionCloudProviderRegionInput is an input type that accepts GetSubscriptionCloudProviderRegionArgs and GetSubscriptionCloudProviderRegionOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderRegionInput` via:
//
//	GetSubscriptionCloudProviderRegionArgs{...}
type GetSubscriptionCloudProviderRegionInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderRegionOutput() GetSubscriptionCloudProviderRegionOutput
	ToGetSubscriptionCloudProviderRegionOutputWithContext(context.Context) GetSubscriptionCloudProviderRegionOutput
}

type GetSubscriptionCloudProviderRegionArgs struct {
	// Support deployment on multiple availability zones within the selected region
	MultipleAvailabilityZones pulumi.BoolInput `pulumi:"multipleAvailabilityZones"`
	// VPC id for the generated network
	NetworkingVpcId pulumi.StringInput `pulumi:"networkingVpcId"`
	// List of generated network configuration
	Networks GetSubscriptionCloudProviderRegionNetworkArrayInput `pulumi:"networks"`
	// List of availability zones used
	PreferredAvailabilityZones pulumi.StringArrayInput `pulumi:"preferredAvailabilityZones"`
	// Deployment region as defined by cloud provider
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetSubscriptionCloudProviderRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProviderRegion)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderRegionArgs) ToGetSubscriptionCloudProviderRegionOutput() GetSubscriptionCloudProviderRegionOutput {
	return i.ToGetSubscriptionCloudProviderRegionOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderRegionArgs) ToGetSubscriptionCloudProviderRegionOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderRegionOutput)
}

// GetSubscriptionCloudProviderRegionArrayInput is an input type that accepts GetSubscriptionCloudProviderRegionArray and GetSubscriptionCloudProviderRegionArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderRegionArrayInput` via:
//
//	GetSubscriptionCloudProviderRegionArray{ GetSubscriptionCloudProviderRegionArgs{...} }
type GetSubscriptionCloudProviderRegionArrayInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderRegionArrayOutput() GetSubscriptionCloudProviderRegionArrayOutput
	ToGetSubscriptionCloudProviderRegionArrayOutputWithContext(context.Context) GetSubscriptionCloudProviderRegionArrayOutput
}

type GetSubscriptionCloudProviderRegionArray []GetSubscriptionCloudProviderRegionInput

func (GetSubscriptionCloudProviderRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProviderRegion)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderRegionArray) ToGetSubscriptionCloudProviderRegionArrayOutput() GetSubscriptionCloudProviderRegionArrayOutput {
	return i.ToGetSubscriptionCloudProviderRegionArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderRegionArray) ToGetSubscriptionCloudProviderRegionArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderRegionArrayOutput)
}

type GetSubscriptionCloudProviderRegionOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProviderRegion)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderRegionOutput) ToGetSubscriptionCloudProviderRegionOutput() GetSubscriptionCloudProviderRegionOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionOutput) ToGetSubscriptionCloudProviderRegionOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionOutput {
	return o
}

// Support deployment on multiple availability zones within the selected region
func (o GetSubscriptionCloudProviderRegionOutput) MultipleAvailabilityZones() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegion) bool { return v.MultipleAvailabilityZones }).(pulumi.BoolOutput)
}

// VPC id for the generated network
func (o GetSubscriptionCloudProviderRegionOutput) NetworkingVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegion) string { return v.NetworkingVpcId }).(pulumi.StringOutput)
}

// List of generated network configuration
func (o GetSubscriptionCloudProviderRegionOutput) Networks() GetSubscriptionCloudProviderRegionNetworkArrayOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegion) []GetSubscriptionCloudProviderRegionNetwork {
		return v.Networks
	}).(GetSubscriptionCloudProviderRegionNetworkArrayOutput)
}

// List of availability zones used
func (o GetSubscriptionCloudProviderRegionOutput) PreferredAvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegion) []string { return v.PreferredAvailabilityZones }).(pulumi.StringArrayOutput)
}

// Deployment region as defined by cloud provider
func (o GetSubscriptionCloudProviderRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegion) string { return v.Region }).(pulumi.StringOutput)
}

type GetSubscriptionCloudProviderRegionArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProviderRegion)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderRegionArrayOutput) ToGetSubscriptionCloudProviderRegionArrayOutput() GetSubscriptionCloudProviderRegionArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionArrayOutput) ToGetSubscriptionCloudProviderRegionArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionArrayOutput) Index(i pulumi.IntInput) GetSubscriptionCloudProviderRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionCloudProviderRegion {
		return vs[0].([]GetSubscriptionCloudProviderRegion)[vs[1].(int)]
	}).(GetSubscriptionCloudProviderRegionOutput)
}

type GetSubscriptionCloudProviderRegionNetwork struct {
	// Deployment CIDR mask for the generated
	NetworkingDeploymentCidr string `pulumi:"networkingDeploymentCidr"`
	// The subnet that the subscription deploys into
	NetworkingSubnetId string `pulumi:"networkingSubnetId"`
	// VPC id for the generated network
	NetworkingVpcId string `pulumi:"networkingVpcId"`
}

// GetSubscriptionCloudProviderRegionNetworkInput is an input type that accepts GetSubscriptionCloudProviderRegionNetworkArgs and GetSubscriptionCloudProviderRegionNetworkOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderRegionNetworkInput` via:
//
//	GetSubscriptionCloudProviderRegionNetworkArgs{...}
type GetSubscriptionCloudProviderRegionNetworkInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderRegionNetworkOutput() GetSubscriptionCloudProviderRegionNetworkOutput
	ToGetSubscriptionCloudProviderRegionNetworkOutputWithContext(context.Context) GetSubscriptionCloudProviderRegionNetworkOutput
}

type GetSubscriptionCloudProviderRegionNetworkArgs struct {
	// Deployment CIDR mask for the generated
	NetworkingDeploymentCidr pulumi.StringInput `pulumi:"networkingDeploymentCidr"`
	// The subnet that the subscription deploys into
	NetworkingSubnetId pulumi.StringInput `pulumi:"networkingSubnetId"`
	// VPC id for the generated network
	NetworkingVpcId pulumi.StringInput `pulumi:"networkingVpcId"`
}

func (GetSubscriptionCloudProviderRegionNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderRegionNetworkArgs) ToGetSubscriptionCloudProviderRegionNetworkOutput() GetSubscriptionCloudProviderRegionNetworkOutput {
	return i.ToGetSubscriptionCloudProviderRegionNetworkOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderRegionNetworkArgs) ToGetSubscriptionCloudProviderRegionNetworkOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderRegionNetworkOutput)
}

// GetSubscriptionCloudProviderRegionNetworkArrayInput is an input type that accepts GetSubscriptionCloudProviderRegionNetworkArray and GetSubscriptionCloudProviderRegionNetworkArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionCloudProviderRegionNetworkArrayInput` via:
//
//	GetSubscriptionCloudProviderRegionNetworkArray{ GetSubscriptionCloudProviderRegionNetworkArgs{...} }
type GetSubscriptionCloudProviderRegionNetworkArrayInput interface {
	pulumi.Input

	ToGetSubscriptionCloudProviderRegionNetworkArrayOutput() GetSubscriptionCloudProviderRegionNetworkArrayOutput
	ToGetSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(context.Context) GetSubscriptionCloudProviderRegionNetworkArrayOutput
}

type GetSubscriptionCloudProviderRegionNetworkArray []GetSubscriptionCloudProviderRegionNetworkInput

func (GetSubscriptionCloudProviderRegionNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (i GetSubscriptionCloudProviderRegionNetworkArray) ToGetSubscriptionCloudProviderRegionNetworkArrayOutput() GetSubscriptionCloudProviderRegionNetworkArrayOutput {
	return i.ToGetSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionCloudProviderRegionNetworkArray) ToGetSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionCloudProviderRegionNetworkArrayOutput)
}

type GetSubscriptionCloudProviderRegionNetworkOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderRegionNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderRegionNetworkOutput) ToGetSubscriptionCloudProviderRegionNetworkOutput() GetSubscriptionCloudProviderRegionNetworkOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionNetworkOutput) ToGetSubscriptionCloudProviderRegionNetworkOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionNetworkOutput {
	return o
}

// Deployment CIDR mask for the generated
func (o GetSubscriptionCloudProviderRegionNetworkOutput) NetworkingDeploymentCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegionNetwork) string { return v.NetworkingDeploymentCidr }).(pulumi.StringOutput)
}

// The subnet that the subscription deploys into
func (o GetSubscriptionCloudProviderRegionNetworkOutput) NetworkingSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegionNetwork) string { return v.NetworkingSubnetId }).(pulumi.StringOutput)
}

// VPC id for the generated network
func (o GetSubscriptionCloudProviderRegionNetworkOutput) NetworkingVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionCloudProviderRegionNetwork) string { return v.NetworkingVpcId }).(pulumi.StringOutput)
}

type GetSubscriptionCloudProviderRegionNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionCloudProviderRegionNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionCloudProviderRegionNetwork)(nil)).Elem()
}

func (o GetSubscriptionCloudProviderRegionNetworkArrayOutput) ToGetSubscriptionCloudProviderRegionNetworkArrayOutput() GetSubscriptionCloudProviderRegionNetworkArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionNetworkArrayOutput) ToGetSubscriptionCloudProviderRegionNetworkArrayOutputWithContext(ctx context.Context) GetSubscriptionCloudProviderRegionNetworkArrayOutput {
	return o
}

func (o GetSubscriptionCloudProviderRegionNetworkArrayOutput) Index(i pulumi.IntInput) GetSubscriptionCloudProviderRegionNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionCloudProviderRegionNetwork {
		return vs[0].([]GetSubscriptionCloudProviderRegionNetwork)[vs[1].(int)]
	}).(GetSubscriptionCloudProviderRegionNetworkOutput)
}

type GetSubscriptionPeeringsPeering struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId string `pulumi:"awsAccountId"`
	// Identifier of the AWS cloud peering
	AwsPeeringId string `pulumi:"awsPeeringId"`
	// The name of the network to be peered
	GcpNetworkName string `pulumi:"gcpNetworkName"`
	// Identifier of the cloud peering
	GcpPeeringId string `pulumi:"gcpPeeringId"`
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId string `pulumi:"gcpProjectId"`
	// The name of the Redis Enterprise Cloud network to be peered
	GcpRedisNetworkName string `pulumi:"gcpRedisNetworkName"`
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GcpRedisProjectId string `pulumi:"gcpRedisProjectId"`
	// ID of the subscription peering
	PeeringId int `pulumi:"peeringId"`
	// The name of the cloud provider. (either `AWS` or `GCP`)
	ProviderName string `pulumi:"providerName"`
	// AWS Region that the VPC to be peered lives in
	Region string `pulumi:"region"`
	// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
	Status string `pulumi:"status"`
	// CIDR range of the VPC to be peered
	VpcCidr string `pulumi:"vpcCidr"`
	// Identifier of the VPC to be peered
	VpcId string `pulumi:"vpcId"`
}

// GetSubscriptionPeeringsPeeringInput is an input type that accepts GetSubscriptionPeeringsPeeringArgs and GetSubscriptionPeeringsPeeringOutput values.
// You can construct a concrete instance of `GetSubscriptionPeeringsPeeringInput` via:
//
//	GetSubscriptionPeeringsPeeringArgs{...}
type GetSubscriptionPeeringsPeeringInput interface {
	pulumi.Input

	ToGetSubscriptionPeeringsPeeringOutput() GetSubscriptionPeeringsPeeringOutput
	ToGetSubscriptionPeeringsPeeringOutputWithContext(context.Context) GetSubscriptionPeeringsPeeringOutput
}

type GetSubscriptionPeeringsPeeringArgs struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	// Identifier of the AWS cloud peering
	AwsPeeringId pulumi.StringInput `pulumi:"awsPeeringId"`
	// The name of the network to be peered
	GcpNetworkName pulumi.StringInput `pulumi:"gcpNetworkName"`
	// Identifier of the cloud peering
	GcpPeeringId pulumi.StringInput `pulumi:"gcpPeeringId"`
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId pulumi.StringInput `pulumi:"gcpProjectId"`
	// The name of the Redis Enterprise Cloud network to be peered
	GcpRedisNetworkName pulumi.StringInput `pulumi:"gcpRedisNetworkName"`
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GcpRedisProjectId pulumi.StringInput `pulumi:"gcpRedisProjectId"`
	// ID of the subscription peering
	PeeringId pulumi.IntInput `pulumi:"peeringId"`
	// The name of the cloud provider. (either `AWS` or `GCP`)
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// AWS Region that the VPC to be peered lives in
	Region pulumi.StringInput `pulumi:"region"`
	// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
	Status pulumi.StringInput `pulumi:"status"`
	// CIDR range of the VPC to be peered
	VpcCidr pulumi.StringInput `pulumi:"vpcCidr"`
	// Identifier of the VPC to be peered
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetSubscriptionPeeringsPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPeeringsPeering)(nil)).Elem()
}

func (i GetSubscriptionPeeringsPeeringArgs) ToGetSubscriptionPeeringsPeeringOutput() GetSubscriptionPeeringsPeeringOutput {
	return i.ToGetSubscriptionPeeringsPeeringOutputWithContext(context.Background())
}

func (i GetSubscriptionPeeringsPeeringArgs) ToGetSubscriptionPeeringsPeeringOutputWithContext(ctx context.Context) GetSubscriptionPeeringsPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPeeringsPeeringOutput)
}

// GetSubscriptionPeeringsPeeringArrayInput is an input type that accepts GetSubscriptionPeeringsPeeringArray and GetSubscriptionPeeringsPeeringArrayOutput values.
// You can construct a concrete instance of `GetSubscriptionPeeringsPeeringArrayInput` via:
//
//	GetSubscriptionPeeringsPeeringArray{ GetSubscriptionPeeringsPeeringArgs{...} }
type GetSubscriptionPeeringsPeeringArrayInput interface {
	pulumi.Input

	ToGetSubscriptionPeeringsPeeringArrayOutput() GetSubscriptionPeeringsPeeringArrayOutput
	ToGetSubscriptionPeeringsPeeringArrayOutputWithContext(context.Context) GetSubscriptionPeeringsPeeringArrayOutput
}

type GetSubscriptionPeeringsPeeringArray []GetSubscriptionPeeringsPeeringInput

func (GetSubscriptionPeeringsPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPeeringsPeering)(nil)).Elem()
}

func (i GetSubscriptionPeeringsPeeringArray) ToGetSubscriptionPeeringsPeeringArrayOutput() GetSubscriptionPeeringsPeeringArrayOutput {
	return i.ToGetSubscriptionPeeringsPeeringArrayOutputWithContext(context.Background())
}

func (i GetSubscriptionPeeringsPeeringArray) ToGetSubscriptionPeeringsPeeringArrayOutputWithContext(ctx context.Context) GetSubscriptionPeeringsPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubscriptionPeeringsPeeringArrayOutput)
}

type GetSubscriptionPeeringsPeeringOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPeeringsPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionPeeringsPeering)(nil)).Elem()
}

func (o GetSubscriptionPeeringsPeeringOutput) ToGetSubscriptionPeeringsPeeringOutput() GetSubscriptionPeeringsPeeringOutput {
	return o
}

func (o GetSubscriptionPeeringsPeeringOutput) ToGetSubscriptionPeeringsPeeringOutputWithContext(ctx context.Context) GetSubscriptionPeeringsPeeringOutput {
	return o
}

// AWS account id that the VPC to be peered lives in
func (o GetSubscriptionPeeringsPeeringOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.AwsAccountId }).(pulumi.StringOutput)
}

// Identifier of the AWS cloud peering
func (o GetSubscriptionPeeringsPeeringOutput) AwsPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.AwsPeeringId }).(pulumi.StringOutput)
}

// The name of the network to be peered
func (o GetSubscriptionPeeringsPeeringOutput) GcpNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.GcpNetworkName }).(pulumi.StringOutput)
}

// Identifier of the cloud peering
func (o GetSubscriptionPeeringsPeeringOutput) GcpPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.GcpPeeringId }).(pulumi.StringOutput)
}

// GCP project ID that the VPC to be peered lives in
func (o GetSubscriptionPeeringsPeeringOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.GcpProjectId }).(pulumi.StringOutput)
}

// The name of the Redis Enterprise Cloud network to be peered
func (o GetSubscriptionPeeringsPeeringOutput) GcpRedisNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.GcpRedisNetworkName }).(pulumi.StringOutput)
}

// Identifier of the Redis Enterprise Cloud GCP project to be peered
func (o GetSubscriptionPeeringsPeeringOutput) GcpRedisProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.GcpRedisProjectId }).(pulumi.StringOutput)
}

// ID of the subscription peering
func (o GetSubscriptionPeeringsPeeringOutput) PeeringId() pulumi.IntOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) int { return v.PeeringId }).(pulumi.IntOutput)
}

// The name of the cloud provider. (either `AWS` or `GCP`)
func (o GetSubscriptionPeeringsPeeringOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.ProviderName }).(pulumi.StringOutput)
}

// AWS Region that the VPC to be peered lives in
func (o GetSubscriptionPeeringsPeeringOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.Region }).(pulumi.StringOutput)
}

// Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
func (o GetSubscriptionPeeringsPeeringOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.Status }).(pulumi.StringOutput)
}

// CIDR range of the VPC to be peered
func (o GetSubscriptionPeeringsPeeringOutput) VpcCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.VpcCidr }).(pulumi.StringOutput)
}

// Identifier of the VPC to be peered
func (o GetSubscriptionPeeringsPeeringOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionPeeringsPeering) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetSubscriptionPeeringsPeeringArrayOutput struct{ *pulumi.OutputState }

func (GetSubscriptionPeeringsPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubscriptionPeeringsPeering)(nil)).Elem()
}

func (o GetSubscriptionPeeringsPeeringArrayOutput) ToGetSubscriptionPeeringsPeeringArrayOutput() GetSubscriptionPeeringsPeeringArrayOutput {
	return o
}

func (o GetSubscriptionPeeringsPeeringArrayOutput) ToGetSubscriptionPeeringsPeeringArrayOutputWithContext(ctx context.Context) GetSubscriptionPeeringsPeeringArrayOutput {
	return o
}

func (o GetSubscriptionPeeringsPeeringArrayOutput) Index(i pulumi.IntInput) GetSubscriptionPeeringsPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubscriptionPeeringsPeering {
		return vs[0].([]GetSubscriptionPeeringsPeering)[vs[1].(int)]
	}).(GetSubscriptionPeeringsPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanInput)(nil)).Elem(), ActiveActiveSubscriptionCreationPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanPtrInput)(nil)).Elem(), ActiveActiveSubscriptionCreationPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanRegionInput)(nil)).Elem(), ActiveActiveSubscriptionCreationPlanRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionCreationPlanRegionArrayInput)(nil)).Elem(), ActiveActiveSubscriptionCreationPlanRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseGlobalAlertInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseGlobalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseGlobalAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseOverrideRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseOverrideRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionArrayInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionDatabaseInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsRegionDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionRegionsRegionDatabaseArrayInput)(nil)).Elem(), ActiveActiveSubscriptionRegionsRegionDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionAllowlistInput)(nil)).Elem(), SubscriptionAllowlistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionAllowlistPtrInput)(nil)).Elem(), SubscriptionAllowlistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderInput)(nil)).Elem(), SubscriptionCloudProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderPtrInput)(nil)).Elem(), SubscriptionCloudProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderRegionInput)(nil)).Elem(), SubscriptionCloudProviderRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderRegionArrayInput)(nil)).Elem(), SubscriptionCloudProviderRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderRegionNetworkInput)(nil)).Elem(), SubscriptionCloudProviderRegionNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCloudProviderRegionNetworkArrayInput)(nil)).Elem(), SubscriptionCloudProviderRegionNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCreationPlanInput)(nil)).Elem(), SubscriptionCreationPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCreationPlanPtrInput)(nil)).Elem(), SubscriptionCreationPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseAlertInput)(nil)).Elem(), SubscriptionDatabaseAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseAlertArrayInput)(nil)).Elem(), SubscriptionDatabaseAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseModuleInput)(nil)).Elem(), SubscriptionDatabaseModuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseModuleArrayInput)(nil)).Elem(), SubscriptionDatabaseModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataPersistenceDataPersistenceInput)(nil)).Elem(), GetDataPersistenceDataPersistenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataPersistenceDataPersistenceArrayInput)(nil)).Elem(), GetDataPersistenceDataPersistenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseAlertInput)(nil)).Elem(), GetDatabaseAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseAlertArrayInput)(nil)).Elem(), GetDatabaseAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseModuleInput)(nil)).Elem(), GetDatabaseModuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseModuleArrayInput)(nil)).Elem(), GetDatabaseModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseModulesModuleInput)(nil)).Elem(), GetDatabaseModulesModuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseModulesModuleArrayInput)(nil)).Elem(), GetDatabaseModulesModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderInput)(nil)).Elem(), GetSubscriptionCloudProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderArrayInput)(nil)).Elem(), GetSubscriptionCloudProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderRegionInput)(nil)).Elem(), GetSubscriptionCloudProviderRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderRegionArrayInput)(nil)).Elem(), GetSubscriptionCloudProviderRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderRegionNetworkInput)(nil)).Elem(), GetSubscriptionCloudProviderRegionNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionCloudProviderRegionNetworkArrayInput)(nil)).Elem(), GetSubscriptionCloudProviderRegionNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPeeringsPeeringInput)(nil)).Elem(), GetSubscriptionPeeringsPeeringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubscriptionPeeringsPeeringArrayInput)(nil)).Elem(), GetSubscriptionPeeringsPeeringArray{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionCreationPlanOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionCreationPlanPtrOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionCreationPlanRegionOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionCreationPlanRegionArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseGlobalAlertOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseOverrideRegionOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsRegionOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsRegionDatabaseOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionRegionsRegionDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionAllowlistOutput{})
	pulumi.RegisterOutputType(SubscriptionAllowlistPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderRegionOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderRegionArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderRegionNetworkOutput{})
	pulumi.RegisterOutputType(SubscriptionCloudProviderRegionNetworkArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionCreationPlanOutput{})
	pulumi.RegisterOutputType(SubscriptionCreationPlanPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseAlertOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseAlertArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseModuleOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseModuleArrayOutput{})
	pulumi.RegisterOutputType(GetDataPersistenceDataPersistenceOutput{})
	pulumi.RegisterOutputType(GetDataPersistenceDataPersistenceArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseAlertOutput{})
	pulumi.RegisterOutputType(GetDatabaseAlertArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseModuleOutput{})
	pulumi.RegisterOutputType(GetDatabaseModuleArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseModulesModuleOutput{})
	pulumi.RegisterOutputType(GetDatabaseModulesModuleArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderRegionOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderRegionArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderRegionNetworkOutput{})
	pulumi.RegisterOutputType(GetSubscriptionCloudProviderRegionNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPeeringsPeeringOutput{})
	pulumi.RegisterOutputType(GetSubscriptionPeeringsPeeringArrayOutput{})
}
