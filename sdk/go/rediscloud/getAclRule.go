// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Rule (a.k.a Redis Rule, Redis ACL) data source allows access to an existing Rule within your Redis Enterprise Cloud
// Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rediscloud.LookupAclRule(ctx, &rediscloud.LookupAclRuleArgs{
//				Name: "cache-reader-rule",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("rediscloudAclRule", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupAclRule(ctx *pulumi.Context, args *LookupAclRuleArgs, opts ...pulumi.InvokeOption) (*LookupAclRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclRuleResult
	err := ctx.Invoke("rediscloud:index/getAclRule:getAclRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAclRule.
type LookupAclRuleArgs struct {
	// The name of the Rule to filter returned subscriptions
	Name string `pulumi:"name"`
}

// A collection of values returned by getAclRule.
type LookupAclRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Rule's name.
	Name string `pulumi:"name"`
	// The ACL Rule itself.
	Rule string `pulumi:"rule"`
}

func LookupAclRuleOutput(ctx *pulumi.Context, args LookupAclRuleOutputArgs, opts ...pulumi.InvokeOption) LookupAclRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclRuleResult, error) {
			args := v.(LookupAclRuleArgs)
			r, err := LookupAclRule(ctx, &args, opts...)
			var s LookupAclRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclRuleResultOutput)
}

// A collection of arguments for invoking getAclRule.
type LookupAclRuleOutputArgs struct {
	// The name of the Rule to filter returned subscriptions
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAclRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRuleArgs)(nil)).Elem()
}

// A collection of values returned by getAclRule.
type LookupAclRuleResultOutput struct{ *pulumi.OutputState }

func (LookupAclRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRuleResult)(nil)).Elem()
}

func (o LookupAclRuleResultOutput) ToLookupAclRuleResultOutput() LookupAclRuleResultOutput {
	return o
}

func (o LookupAclRuleResultOutput) ToLookupAclRuleResultOutputWithContext(ctx context.Context) LookupAclRuleResultOutput {
	return o
}

func (o LookupAclRuleResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAclRuleResult] {
	return pulumix.Output[LookupAclRuleResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAclRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Rule's name.
func (o LookupAclRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ACL Rule itself.
func (o LookupAclRuleResultOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRuleResult) string { return v.Rule }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclRuleResultOutput{})
}
