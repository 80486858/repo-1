// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveActiveSubscriptionDatabase struct {
	pulumi.CustomResourceState

	// SSL certificate to authenticate user connections.
	ClientSslCertificate pulumi.StringPtrOutput `pulumi:"clientSslCertificate"`
	// Data eviction items policy
	DataEviction pulumi.StringPtrOutput `pulumi:"dataEviction"`
	// Identifier of the database created
	DbId pulumi.IntOutput `pulumi:"dbId"`
	// Use TLS for authentication.
	EnableTls pulumi.BoolPtrOutput `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrOutput `pulumi:"externalEndpointForOssClusterApi"`
	// Set of alerts to enable on the database
	GlobalAlerts ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput `pulumi:"globalAlerts"`
	// Rate of database data persistence (in persistent storage)
	GlobalDataPersistence pulumi.StringPtrOutput `pulumi:"globalDataPersistence"`
	// Password used to access the database. If left empty, the password will be generated automatically
	GlobalPassword pulumi.StringOutput `pulumi:"globalPassword"`
	// Set of CIDR addresses to allow access to the database
	GlobalSourceIps pulumi.StringArrayOutput `pulumi:"globalSourceIps"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64Output `pulumi:"memoryLimitInGb"`
	// A meaningful name to identify the database
	Name pulumi.StringOutput `pulumi:"name"`
	// Region-specific configuration parameters to override the global configuration
	OverrideRegions ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput `pulumi:"overrideRegions"`
	// Region public and private endpoints to access the database
	PrivateEndpoint pulumi.StringMapOutput `pulumi:"privateEndpoint"`
	// Region public and private endpoints to access the database
	PublicEndpoint pulumi.StringMapOutput `pulumi:"publicEndpoint"`
	// Identifier of the subscription
	SubscriptionId pulumi.IntOutput `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrOutput `pulumi:"supportOssClusterApi"`
}

// NewActiveActiveSubscriptionDatabase registers a new resource with the given unique name, arguments, and options.
func NewActiveActiveSubscriptionDatabase(ctx *pulumi.Context,
	name string, args *ActiveActiveSubscriptionDatabaseArgs, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemoryLimitInGb == nil {
		return nil, errors.New("invalid value for required argument 'MemoryLimitInGb'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	var resource ActiveActiveSubscriptionDatabase
	err := ctx.RegisterResource("rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveActiveSubscriptionDatabase gets an existing ActiveActiveSubscriptionDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveActiveSubscriptionDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveActiveSubscriptionDatabaseState, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionDatabase, error) {
	var resource ActiveActiveSubscriptionDatabase
	err := ctx.ReadResource("rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveActiveSubscriptionDatabase resources.
type activeActiveSubscriptionDatabaseState struct {
	// SSL certificate to authenticate user connections.
	ClientSslCertificate *string `pulumi:"clientSslCertificate"`
	// Data eviction items policy
	DataEviction *string `pulumi:"dataEviction"`
	// Identifier of the database created
	DbId *int `pulumi:"dbId"`
	// Use TLS for authentication.
	EnableTls *bool `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi *bool `pulumi:"externalEndpointForOssClusterApi"`
	// Set of alerts to enable on the database
	GlobalAlerts []ActiveActiveSubscriptionDatabaseGlobalAlert `pulumi:"globalAlerts"`
	// Rate of database data persistence (in persistent storage)
	GlobalDataPersistence *string `pulumi:"globalDataPersistence"`
	// Password used to access the database. If left empty, the password will be generated automatically
	GlobalPassword *string `pulumi:"globalPassword"`
	// Set of CIDR addresses to allow access to the database
	GlobalSourceIps []string `pulumi:"globalSourceIps"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `pulumi:"memoryLimitInGb"`
	// A meaningful name to identify the database
	Name *string `pulumi:"name"`
	// Region-specific configuration parameters to override the global configuration
	OverrideRegions []ActiveActiveSubscriptionDatabaseOverrideRegion `pulumi:"overrideRegions"`
	// Region public and private endpoints to access the database
	PrivateEndpoint map[string]string `pulumi:"privateEndpoint"`
	// Region public and private endpoints to access the database
	PublicEndpoint map[string]string `pulumi:"publicEndpoint"`
	// Identifier of the subscription
	SubscriptionId *int `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi *bool `pulumi:"supportOssClusterApi"`
}

type ActiveActiveSubscriptionDatabaseState struct {
	// SSL certificate to authenticate user connections.
	ClientSslCertificate pulumi.StringPtrInput
	// Data eviction items policy
	DataEviction pulumi.StringPtrInput
	// Identifier of the database created
	DbId pulumi.IntPtrInput
	// Use TLS for authentication.
	EnableTls pulumi.BoolPtrInput
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrInput
	// Set of alerts to enable on the database
	GlobalAlerts ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput
	// Rate of database data persistence (in persistent storage)
	GlobalDataPersistence pulumi.StringPtrInput
	// Password used to access the database. If left empty, the password will be generated automatically
	GlobalPassword pulumi.StringPtrInput
	// Set of CIDR addresses to allow access to the database
	GlobalSourceIps pulumi.StringArrayInput
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64PtrInput
	// A meaningful name to identify the database
	Name pulumi.StringPtrInput
	// Region-specific configuration parameters to override the global configuration
	OverrideRegions ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput
	// Region public and private endpoints to access the database
	PrivateEndpoint pulumi.StringMapInput
	// Region public and private endpoints to access the database
	PublicEndpoint pulumi.StringMapInput
	// Identifier of the subscription
	SubscriptionId pulumi.IntPtrInput
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrInput
}

func (ActiveActiveSubscriptionDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionDatabaseState)(nil)).Elem()
}

type activeActiveSubscriptionDatabaseArgs struct {
	// SSL certificate to authenticate user connections.
	ClientSslCertificate *string `pulumi:"clientSslCertificate"`
	// Data eviction items policy
	DataEviction *string `pulumi:"dataEviction"`
	// Use TLS for authentication.
	EnableTls *bool `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi *bool `pulumi:"externalEndpointForOssClusterApi"`
	// Set of alerts to enable on the database
	GlobalAlerts []ActiveActiveSubscriptionDatabaseGlobalAlert `pulumi:"globalAlerts"`
	// Rate of database data persistence (in persistent storage)
	GlobalDataPersistence *string `pulumi:"globalDataPersistence"`
	// Password used to access the database. If left empty, the password will be generated automatically
	GlobalPassword *string `pulumi:"globalPassword"`
	// Set of CIDR addresses to allow access to the database
	GlobalSourceIps []string `pulumi:"globalSourceIps"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb float64 `pulumi:"memoryLimitInGb"`
	// A meaningful name to identify the database
	Name *string `pulumi:"name"`
	// Region-specific configuration parameters to override the global configuration
	OverrideRegions []ActiveActiveSubscriptionDatabaseOverrideRegion `pulumi:"overrideRegions"`
	// Identifier of the subscription
	SubscriptionId int `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi *bool `pulumi:"supportOssClusterApi"`
}

// The set of arguments for constructing a ActiveActiveSubscriptionDatabase resource.
type ActiveActiveSubscriptionDatabaseArgs struct {
	// SSL certificate to authenticate user connections.
	ClientSslCertificate pulumi.StringPtrInput
	// Data eviction items policy
	DataEviction pulumi.StringPtrInput
	// Use TLS for authentication.
	EnableTls pulumi.BoolPtrInput
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrInput
	// Set of alerts to enable on the database
	GlobalAlerts ActiveActiveSubscriptionDatabaseGlobalAlertArrayInput
	// Rate of database data persistence (in persistent storage)
	GlobalDataPersistence pulumi.StringPtrInput
	// Password used to access the database. If left empty, the password will be generated automatically
	GlobalPassword pulumi.StringPtrInput
	// Set of CIDR addresses to allow access to the database
	GlobalSourceIps pulumi.StringArrayInput
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64Input
	// A meaningful name to identify the database
	Name pulumi.StringPtrInput
	// Region-specific configuration parameters to override the global configuration
	OverrideRegions ActiveActiveSubscriptionDatabaseOverrideRegionArrayInput
	// Identifier of the subscription
	SubscriptionId pulumi.IntInput
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrInput
}

func (ActiveActiveSubscriptionDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionDatabaseArgs)(nil)).Elem()
}

type ActiveActiveSubscriptionDatabaseInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseOutput() ActiveActiveSubscriptionDatabaseOutput
	ToActiveActiveSubscriptionDatabaseOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOutput
}

func (*ActiveActiveSubscriptionDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (i *ActiveActiveSubscriptionDatabase) ToActiveActiveSubscriptionDatabaseOutput() ActiveActiveSubscriptionDatabaseOutput {
	return i.ToActiveActiveSubscriptionDatabaseOutputWithContext(context.Background())
}

func (i *ActiveActiveSubscriptionDatabase) ToActiveActiveSubscriptionDatabaseOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseOutput)
}

// ActiveActiveSubscriptionDatabaseArrayInput is an input type that accepts ActiveActiveSubscriptionDatabaseArray and ActiveActiveSubscriptionDatabaseArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseArrayInput` via:
//
//	ActiveActiveSubscriptionDatabaseArray{ ActiveActiveSubscriptionDatabaseArgs{...} }
type ActiveActiveSubscriptionDatabaseArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseArrayOutput() ActiveActiveSubscriptionDatabaseArrayOutput
	ToActiveActiveSubscriptionDatabaseArrayOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseArrayOutput
}

type ActiveActiveSubscriptionDatabaseArray []ActiveActiveSubscriptionDatabaseInput

func (ActiveActiveSubscriptionDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseArray) ToActiveActiveSubscriptionDatabaseArrayOutput() ActiveActiveSubscriptionDatabaseArrayOutput {
	return i.ToActiveActiveSubscriptionDatabaseArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseArray) ToActiveActiveSubscriptionDatabaseArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseArrayOutput)
}

// ActiveActiveSubscriptionDatabaseMapInput is an input type that accepts ActiveActiveSubscriptionDatabaseMap and ActiveActiveSubscriptionDatabaseMapOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionDatabaseMapInput` via:
//
//	ActiveActiveSubscriptionDatabaseMap{ "key": ActiveActiveSubscriptionDatabaseArgs{...} }
type ActiveActiveSubscriptionDatabaseMapInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionDatabaseMapOutput() ActiveActiveSubscriptionDatabaseMapOutput
	ToActiveActiveSubscriptionDatabaseMapOutputWithContext(context.Context) ActiveActiveSubscriptionDatabaseMapOutput
}

type ActiveActiveSubscriptionDatabaseMap map[string]ActiveActiveSubscriptionDatabaseInput

func (ActiveActiveSubscriptionDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (i ActiveActiveSubscriptionDatabaseMap) ToActiveActiveSubscriptionDatabaseMapOutput() ActiveActiveSubscriptionDatabaseMapOutput {
	return i.ToActiveActiveSubscriptionDatabaseMapOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionDatabaseMap) ToActiveActiveSubscriptionDatabaseMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionDatabaseMapOutput)
}

type ActiveActiveSubscriptionDatabaseOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseOutput) ToActiveActiveSubscriptionDatabaseOutput() ActiveActiveSubscriptionDatabaseOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseOutput) ToActiveActiveSubscriptionDatabaseOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseOutput {
	return o
}

// SSL certificate to authenticate user connections.
func (o ActiveActiveSubscriptionDatabaseOutput) ClientSslCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringPtrOutput { return v.ClientSslCertificate }).(pulumi.StringPtrOutput)
}

// Data eviction items policy
func (o ActiveActiveSubscriptionDatabaseOutput) DataEviction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringPtrOutput { return v.DataEviction }).(pulumi.StringPtrOutput)
}

// Identifier of the database created
func (o ActiveActiveSubscriptionDatabaseOutput) DbId() pulumi.IntOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.IntOutput { return v.DbId }).(pulumi.IntOutput)
}

// Use TLS for authentication.
func (o ActiveActiveSubscriptionDatabaseOutput) EnableTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.BoolPtrOutput { return v.EnableTls }).(pulumi.BoolPtrOutput)
}

// Should use the external endpoint for open-source (OSS) Cluster API
func (o ActiveActiveSubscriptionDatabaseOutput) ExternalEndpointForOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.BoolPtrOutput {
		return v.ExternalEndpointForOssClusterApi
	}).(pulumi.BoolPtrOutput)
}

// Set of alerts to enable on the database
func (o ActiveActiveSubscriptionDatabaseOutput) GlobalAlerts() ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput {
		return v.GlobalAlerts
	}).(ActiveActiveSubscriptionDatabaseGlobalAlertArrayOutput)
}

// Rate of database data persistence (in persistent storage)
func (o ActiveActiveSubscriptionDatabaseOutput) GlobalDataPersistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringPtrOutput { return v.GlobalDataPersistence }).(pulumi.StringPtrOutput)
}

// Password used to access the database. If left empty, the password will be generated automatically
func (o ActiveActiveSubscriptionDatabaseOutput) GlobalPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringOutput { return v.GlobalPassword }).(pulumi.StringOutput)
}

// Set of CIDR addresses to allow access to the database
func (o ActiveActiveSubscriptionDatabaseOutput) GlobalSourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringArrayOutput { return v.GlobalSourceIps }).(pulumi.StringArrayOutput)
}

// Maximum memory usage for this specific database
func (o ActiveActiveSubscriptionDatabaseOutput) MemoryLimitInGb() pulumi.Float64Output {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.Float64Output { return v.MemoryLimitInGb }).(pulumi.Float64Output)
}

// A meaningful name to identify the database
func (o ActiveActiveSubscriptionDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region-specific configuration parameters to override the global configuration
func (o ActiveActiveSubscriptionDatabaseOutput) OverrideRegions() ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput {
		return v.OverrideRegions
	}).(ActiveActiveSubscriptionDatabaseOverrideRegionArrayOutput)
}

// Region public and private endpoints to access the database
func (o ActiveActiveSubscriptionDatabaseOutput) PrivateEndpoint() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringMapOutput { return v.PrivateEndpoint }).(pulumi.StringMapOutput)
}

// Region public and private endpoints to access the database
func (o ActiveActiveSubscriptionDatabaseOutput) PublicEndpoint() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.StringMapOutput { return v.PublicEndpoint }).(pulumi.StringMapOutput)
}

// Identifier of the subscription
func (o ActiveActiveSubscriptionDatabaseOutput) SubscriptionId() pulumi.IntOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.IntOutput { return v.SubscriptionId }).(pulumi.IntOutput)
}

// Support Redis open-source (OSS) Cluster API
func (o ActiveActiveSubscriptionDatabaseOutput) SupportOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionDatabase) pulumi.BoolPtrOutput { return v.SupportOssClusterApi }).(pulumi.BoolPtrOutput)
}

type ActiveActiveSubscriptionDatabaseArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseArrayOutput) ToActiveActiveSubscriptionDatabaseArrayOutput() ActiveActiveSubscriptionDatabaseArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseArrayOutput) ToActiveActiveSubscriptionDatabaseArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionDatabase {
		return vs[0].([]*ActiveActiveSubscriptionDatabase)[vs[1].(int)]
	}).(ActiveActiveSubscriptionDatabaseOutput)
}

type ActiveActiveSubscriptionDatabaseMapOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionDatabase)(nil)).Elem()
}

func (o ActiveActiveSubscriptionDatabaseMapOutput) ToActiveActiveSubscriptionDatabaseMapOutput() ActiveActiveSubscriptionDatabaseMapOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseMapOutput) ToActiveActiveSubscriptionDatabaseMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionDatabaseMapOutput {
	return o
}

func (o ActiveActiveSubscriptionDatabaseMapOutput) MapIndex(k pulumi.StringInput) ActiveActiveSubscriptionDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionDatabase {
		return vs[0].(map[string]*ActiveActiveSubscriptionDatabase)[vs[1].(string)]
	}).(ActiveActiveSubscriptionDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseInput)(nil)).Elem(), &ActiveActiveSubscriptionDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseArrayInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionDatabaseMapInput)(nil)).Elem(), ActiveActiveSubscriptionDatabaseMap{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionDatabaseMapOutput{})
}
