// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Rule (a.k.a Redis Rule, Redis ACL) in your Redis Enterprise Cloud Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rediscloud.NewAclRule(ctx, "rule-resource", &rediscloud.AclRuleArgs{
//				Rule: pulumi.String("+@read ~cache:*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `rediscloud_acl_rule` can be imported using the Identifier of the Rule, e.g.
//
// ```sh
//
//	$ pulumi import rediscloud:index/aclRule:AclRule rule-resource 123456
//
// ```
type AclRule struct {
	pulumi.CustomResourceState

	// A meaningful name for the rule. Must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ACL rule itself, built up as permissions/restrictions written in
	// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
	Rule pulumi.StringOutput `pulumi:"rule"`
}

// NewAclRule registers a new resource with the given unique name, arguments, and options.
func NewAclRule(ctx *pulumi.Context,
	name string, args *AclRuleArgs, opts ...pulumi.ResourceOption) (*AclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRule
	err := ctx.RegisterResource("rediscloud:index/aclRule:AclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRule gets an existing AclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRuleState, opts ...pulumi.ResourceOption) (*AclRule, error) {
	var resource AclRule
	err := ctx.ReadResource("rediscloud:index/aclRule:AclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRule resources.
type aclRuleState struct {
	// A meaningful name for the rule. Must be unique.
	Name *string `pulumi:"name"`
	// The ACL rule itself, built up as permissions/restrictions written in
	// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
	Rule *string `pulumi:"rule"`
}

type AclRuleState struct {
	// A meaningful name for the rule. Must be unique.
	Name pulumi.StringPtrInput
	// The ACL rule itself, built up as permissions/restrictions written in
	// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
	Rule pulumi.StringPtrInput
}

func (AclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleState)(nil)).Elem()
}

type aclRuleArgs struct {
	// A meaningful name for the rule. Must be unique.
	Name *string `pulumi:"name"`
	// The ACL rule itself, built up as permissions/restrictions written in
	// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
	Rule string `pulumi:"rule"`
}

// The set of arguments for constructing a AclRule resource.
type AclRuleArgs struct {
	// A meaningful name for the rule. Must be unique.
	Name pulumi.StringPtrInput
	// The ACL rule itself, built up as permissions/restrictions written in
	// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
	Rule pulumi.StringInput
}

func (AclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleArgs)(nil)).Elem()
}

type AclRuleInput interface {
	pulumi.Input

	ToAclRuleOutput() AclRuleOutput
	ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput
}

func (*AclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (i *AclRule) ToAclRuleOutput() AclRuleOutput {
	return i.ToAclRuleOutputWithContext(context.Background())
}

func (i *AclRule) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleOutput)
}

func (i *AclRule) ToOutput(ctx context.Context) pulumix.Output[*AclRule] {
	return pulumix.Output[*AclRule]{
		OutputState: i.ToAclRuleOutputWithContext(ctx).OutputState,
	}
}

// AclRuleArrayInput is an input type that accepts AclRuleArray and AclRuleArrayOutput values.
// You can construct a concrete instance of `AclRuleArrayInput` via:
//
//	AclRuleArray{ AclRuleArgs{...} }
type AclRuleArrayInput interface {
	pulumi.Input

	ToAclRuleArrayOutput() AclRuleArrayOutput
	ToAclRuleArrayOutputWithContext(context.Context) AclRuleArrayOutput
}

type AclRuleArray []AclRuleInput

func (AclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (i AclRuleArray) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return i.ToAclRuleArrayOutputWithContext(context.Background())
}

func (i AclRuleArray) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleArrayOutput)
}

func (i AclRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*AclRule] {
	return pulumix.Output[[]*AclRule]{
		OutputState: i.ToAclRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// AclRuleMapInput is an input type that accepts AclRuleMap and AclRuleMapOutput values.
// You can construct a concrete instance of `AclRuleMapInput` via:
//
//	AclRuleMap{ "key": AclRuleArgs{...} }
type AclRuleMapInput interface {
	pulumi.Input

	ToAclRuleMapOutput() AclRuleMapOutput
	ToAclRuleMapOutputWithContext(context.Context) AclRuleMapOutput
}

type AclRuleMap map[string]AclRuleInput

func (AclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (i AclRuleMap) ToAclRuleMapOutput() AclRuleMapOutput {
	return i.ToAclRuleMapOutputWithContext(context.Background())
}

func (i AclRuleMap) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleMapOutput)
}

func (i AclRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclRule] {
	return pulumix.Output[map[string]*AclRule]{
		OutputState: i.ToAclRuleMapOutputWithContext(ctx).OutputState,
	}
}

type AclRuleOutput struct{ *pulumi.OutputState }

func (AclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (o AclRuleOutput) ToAclRuleOutput() AclRuleOutput {
	return o
}

func (o AclRuleOutput) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return o
}

func (o AclRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*AclRule] {
	return pulumix.Output[*AclRule]{
		OutputState: o.OutputState,
	}
}

// A meaningful name for the rule. Must be unique.
func (o AclRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ACL rule itself, built up as permissions/restrictions written in
// the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
func (o AclRuleOutput) Rule() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Rule }).(pulumi.StringOutput)
}

type AclRuleArrayOutput struct{ *pulumi.OutputState }

func (AclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AclRule] {
	return pulumix.Output[[]*AclRule]{
		OutputState: o.OutputState,
	}
}

func (o AclRuleArrayOutput) Index(i pulumi.IntInput) AclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].([]*AclRule)[vs[1].(int)]
	}).(AclRuleOutput)
}

type AclRuleMapOutput struct{ *pulumi.OutputState }

func (AclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (o AclRuleMapOutput) ToAclRuleMapOutput() AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AclRule] {
	return pulumix.Output[map[string]*AclRule]{
		OutputState: o.OutputState,
	}
}

func (o AclRuleMapOutput) MapIndex(k pulumi.StringInput) AclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].(map[string]*AclRule)[vs[1].(string)]
	}).(AclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleInput)(nil)).Elem(), &AclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleArrayInput)(nil)).Elem(), AclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleMapInput)(nil)).Elem(), AclRuleMap{})
	pulumi.RegisterOutputType(AclRuleOutput{})
	pulumi.RegisterOutputType(AclRuleArrayOutput{})
	pulumi.RegisterOutputType(AclRuleMapOutput{})
}
