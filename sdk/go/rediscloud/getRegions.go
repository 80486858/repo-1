// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Regions data source allows access to a list of supported cloud provider regions. These regions can be used with the subscription resource.
//
// ## Example Usage
//
// The following example returns all of the supported regions available within your Redis Enterprise Cloud account.
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rediscloud.GetRegions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("allRegions", example.Regions)
//			return nil
//		})
//	}
//
// ```
//
// The following example show how the list of regions can be filtered by cloud provider, (`AWS` or `GCP`).
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rediscloud.GetRegions(ctx, &rediscloud.GetRegionsArgs{
//				ProviderName: pulumi.StringRef("AWS"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = rediscloud.GetRegions(ctx, &rediscloud.GetRegionsArgs{
//				ProviderName: pulumi.StringRef("GCP"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRegions(ctx *pulumi.Context, args *GetRegionsArgs, opts ...pulumi.InvokeOption) (*GetRegionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRegionsResult
	err := ctx.Invoke("rediscloud:index/getRegions:getRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegions.
type GetRegionsArgs struct {
	// The name of the cloud provider to filter returned regions, (accepted values are `AWS` or `GCP`).
	ProviderName *string `pulumi:"providerName"`
}

// A collection of values returned by getRegions.
type GetRegionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The identifier of the owning cloud provider, (either `AWS` or `GCP`)
	ProviderName *string `pulumi:"providerName"`
	// A list of regions from either a single or multiple cloud providers.
	Regions []GetRegionsRegion `pulumi:"regions"`
}

func GetRegionsOutput(ctx *pulumi.Context, args GetRegionsOutputArgs, opts ...pulumi.InvokeOption) GetRegionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRegionsResult, error) {
			args := v.(GetRegionsArgs)
			r, err := GetRegions(ctx, &args, opts...)
			var s GetRegionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRegionsResultOutput)
}

// A collection of arguments for invoking getRegions.
type GetRegionsOutputArgs struct {
	// The name of the cloud provider to filter returned regions, (accepted values are `AWS` or `GCP`).
	ProviderName pulumi.StringPtrInput `pulumi:"providerName"`
}

func (GetRegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsArgs)(nil)).Elem()
}

// A collection of values returned by getRegions.
type GetRegionsResultOutput struct{ *pulumi.OutputState }

func (GetRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsResult)(nil)).Elem()
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutput() GetRegionsResultOutput {
	return o
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutputWithContext(ctx context.Context) GetRegionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the owning cloud provider, (either `AWS` or `GCP`)
func (o GetRegionsResultOutput) ProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionsResult) *string { return v.ProviderName }).(pulumi.StringPtrOutput)
}

// A list of regions from either a single or multiple cloud providers.
func (o GetRegionsResultOutput) Regions() GetRegionsRegionArrayOutput {
	return o.ApplyT(func(v GetRegionsResult) []GetRegionsRegion { return v.Regions }).(GetRegionsRegionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionsResultOutput{})
}
