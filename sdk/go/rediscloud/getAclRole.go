// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The Role data source allows access to an existing Role within your Redis Enterprise Cloud Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rediscloud.LookupAclRole(ctx, &rediscloud.LookupAclRoleArgs{
//				Name: "fast-admin",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("rediscloudAclRole", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupAclRole(ctx *pulumi.Context, args *LookupAclRoleArgs, opts ...pulumi.InvokeOption) (*LookupAclRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclRoleResult
	err := ctx.Invoke("rediscloud:index/getAclRole:getAclRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAclRole.
type LookupAclRoleArgs struct {
	// The name of the Role to filter returned subscriptions
	Name string `pulumi:"name"`
}

// A collection of values returned by getAclRole.
type LookupAclRoleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the Rule.
	Name string `pulumi:"name"`
	// The Rules associated with the Role.
	Rules []GetAclRoleRule `pulumi:"rules"`
}

func LookupAclRoleOutput(ctx *pulumi.Context, args LookupAclRoleOutputArgs, opts ...pulumi.InvokeOption) LookupAclRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclRoleResult, error) {
			args := v.(LookupAclRoleArgs)
			r, err := LookupAclRole(ctx, &args, opts...)
			var s LookupAclRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclRoleResultOutput)
}

// A collection of arguments for invoking getAclRole.
type LookupAclRoleOutputArgs struct {
	// The name of the Role to filter returned subscriptions
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAclRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRoleArgs)(nil)).Elem()
}

// A collection of values returned by getAclRole.
type LookupAclRoleResultOutput struct{ *pulumi.OutputState }

func (LookupAclRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclRoleResult)(nil)).Elem()
}

func (o LookupAclRoleResultOutput) ToLookupAclRoleResultOutput() LookupAclRoleResultOutput {
	return o
}

func (o LookupAclRoleResultOutput) ToLookupAclRoleResultOutputWithContext(ctx context.Context) LookupAclRoleResultOutput {
	return o
}

func (o LookupAclRoleResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAclRoleResult] {
	return pulumix.Output[LookupAclRoleResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAclRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the Rule.
func (o LookupAclRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Rules associated with the Role.
func (o LookupAclRoleResultOutput) Rules() GetAclRoleRuleArrayOutput {
	return o.ApplyT(func(v LookupAclRoleResult) []GetAclRoleRule { return v.Rules }).(GetAclRoleRuleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclRoleResultOutput{})
}
