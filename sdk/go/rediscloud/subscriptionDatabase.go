// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SubscriptionDatabase struct {
	pulumi.CustomResourceState

	// Set of alerts to enable on the database
	Alerts SubscriptionDatabaseAlertArrayOutput `pulumi:"alerts"`
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes pulumi.IntPtrOutput `pulumi:"averageItemSizeInBytes"`
	// SSL certificate to authenticate user connections
	ClientSslCertificate pulumi.StringPtrOutput `pulumi:"clientSslCertificate"`
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
	// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction pulumi.StringPtrOutput `pulumi:"dataEviction"`
	// Rate of database data persistence (in persistent storage)
	DataPersistence pulumi.StringPtrOutput `pulumi:"dataPersistence"`
	// Identifier of the database created
	DbId pulumi.IntOutput `pulumi:"dbId"`
	// Use TLS for authentication
	EnableTls pulumi.BoolPtrOutput `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrOutput `pulumi:"externalEndpointForOssClusterApi"`
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
	// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicies pulumi.StringArrayOutput `pulumi:"hashingPolicies"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64Output `pulumi:"memoryLimitInGb"`
	// Modules to be provisioned in the database
	Modules SubscriptionDatabaseModuleArrayOutput `pulumi:"modules"`
	// A meaningful name to identify the database
	Name pulumi.StringOutput `pulumi:"name"`
	// Password used to access the database. If left empty, the password will be generated automatically
	Password pulumi.StringOutput `pulumi:"password"`
	// Path that will be used to store database backup files
	PeriodicBackupPath pulumi.StringPtrOutput `pulumi:"periodicBackupPath"`
	// Private endpoint to access the database
	PrivateEndpoint pulumi.StringOutput `pulumi:"privateEndpoint"`
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Public endpoint to access the database
	PublicEndpoint pulumi.StringOutput `pulumi:"publicEndpoint"`
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
	// the URI provided is Redis Labs Cloud instance, only host and port should be provided
	ReplicaOfs pulumi.StringArrayOutput `pulumi:"replicaOfs"`
	// Databases replication
	Replication pulumi.BoolPtrOutput `pulumi:"replication"`
	// Set of CIDR addresses to allow access to the database
	SourceIps pulumi.StringArrayOutput `pulumi:"sourceIps"`
	// Identifier of the subscription
	SubscriptionId pulumi.IntOutput `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrOutput `pulumi:"supportOssClusterApi"`
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy pulumi.StringOutput `pulumi:"throughputMeasurementBy"`
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue pulumi.IntOutput `pulumi:"throughputMeasurementValue"`
}

// NewSubscriptionDatabase registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionDatabase(ctx *pulumi.Context,
	name string, args *SubscriptionDatabaseArgs, opts ...pulumi.ResourceOption) (*SubscriptionDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemoryLimitInGb == nil {
		return nil, errors.New("invalid value for required argument 'MemoryLimitInGb'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.ThroughputMeasurementBy == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputMeasurementBy'")
	}
	if args.ThroughputMeasurementValue == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputMeasurementValue'")
	}
	var resource SubscriptionDatabase
	err := ctx.RegisterResource("rediscloud:index/subscriptionDatabase:SubscriptionDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionDatabase gets an existing SubscriptionDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionDatabaseState, opts ...pulumi.ResourceOption) (*SubscriptionDatabase, error) {
	var resource SubscriptionDatabase
	err := ctx.ReadResource("rediscloud:index/subscriptionDatabase:SubscriptionDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionDatabase resources.
type subscriptionDatabaseState struct {
	// Set of alerts to enable on the database
	Alerts []SubscriptionDatabaseAlert `pulumi:"alerts"`
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *int `pulumi:"averageItemSizeInBytes"`
	// SSL certificate to authenticate user connections
	ClientSslCertificate *string `pulumi:"clientSslCertificate"`
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
	// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `pulumi:"dataEviction"`
	// Rate of database data persistence (in persistent storage)
	DataPersistence *string `pulumi:"dataPersistence"`
	// Identifier of the database created
	DbId *int `pulumi:"dbId"`
	// Use TLS for authentication
	EnableTls *bool `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi *bool `pulumi:"externalEndpointForOssClusterApi"`
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
	// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicies []string `pulumi:"hashingPolicies"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb *float64 `pulumi:"memoryLimitInGb"`
	// Modules to be provisioned in the database
	Modules []SubscriptionDatabaseModule `pulumi:"modules"`
	// A meaningful name to identify the database
	Name *string `pulumi:"name"`
	// Password used to access the database. If left empty, the password will be generated automatically
	Password *string `pulumi:"password"`
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `pulumi:"periodicBackupPath"`
	// Private endpoint to access the database
	PrivateEndpoint *string `pulumi:"privateEndpoint"`
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol *string `pulumi:"protocol"`
	// Public endpoint to access the database
	PublicEndpoint *string `pulumi:"publicEndpoint"`
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
	// the URI provided is Redis Labs Cloud instance, only host and port should be provided
	ReplicaOfs []string `pulumi:"replicaOfs"`
	// Databases replication
	Replication *bool `pulumi:"replication"`
	// Set of CIDR addresses to allow access to the database
	SourceIps []string `pulumi:"sourceIps"`
	// Identifier of the subscription
	SubscriptionId *int `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi *bool `pulumi:"supportOssClusterApi"`
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy *string `pulumi:"throughputMeasurementBy"`
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue *int `pulumi:"throughputMeasurementValue"`
}

type SubscriptionDatabaseState struct {
	// Set of alerts to enable on the database
	Alerts SubscriptionDatabaseAlertArrayInput
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes pulumi.IntPtrInput
	// SSL certificate to authenticate user connections
	ClientSslCertificate pulumi.StringPtrInput
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
	// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction pulumi.StringPtrInput
	// Rate of database data persistence (in persistent storage)
	DataPersistence pulumi.StringPtrInput
	// Identifier of the database created
	DbId pulumi.IntPtrInput
	// Use TLS for authentication
	EnableTls pulumi.BoolPtrInput
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrInput
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
	// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicies pulumi.StringArrayInput
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64PtrInput
	// Modules to be provisioned in the database
	Modules SubscriptionDatabaseModuleArrayInput
	// A meaningful name to identify the database
	Name pulumi.StringPtrInput
	// Password used to access the database. If left empty, the password will be generated automatically
	Password pulumi.StringPtrInput
	// Path that will be used to store database backup files
	PeriodicBackupPath pulumi.StringPtrInput
	// Private endpoint to access the database
	PrivateEndpoint pulumi.StringPtrInput
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol pulumi.StringPtrInput
	// Public endpoint to access the database
	PublicEndpoint pulumi.StringPtrInput
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
	// the URI provided is Redis Labs Cloud instance, only host and port should be provided
	ReplicaOfs pulumi.StringArrayInput
	// Databases replication
	Replication pulumi.BoolPtrInput
	// Set of CIDR addresses to allow access to the database
	SourceIps pulumi.StringArrayInput
	// Identifier of the subscription
	SubscriptionId pulumi.IntPtrInput
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrInput
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy pulumi.StringPtrInput
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue pulumi.IntPtrInput
}

func (SubscriptionDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionDatabaseState)(nil)).Elem()
}

type subscriptionDatabaseArgs struct {
	// Set of alerts to enable on the database
	Alerts []SubscriptionDatabaseAlert `pulumi:"alerts"`
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes *int `pulumi:"averageItemSizeInBytes"`
	// SSL certificate to authenticate user connections
	ClientSslCertificate *string `pulumi:"clientSslCertificate"`
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
	// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction *string `pulumi:"dataEviction"`
	// Rate of database data persistence (in persistent storage)
	DataPersistence *string `pulumi:"dataPersistence"`
	// Use TLS for authentication
	EnableTls *bool `pulumi:"enableTls"`
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi *bool `pulumi:"externalEndpointForOssClusterApi"`
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
	// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicies []string `pulumi:"hashingPolicies"`
	// Maximum memory usage for this specific database
	MemoryLimitInGb float64 `pulumi:"memoryLimitInGb"`
	// Modules to be provisioned in the database
	Modules []SubscriptionDatabaseModule `pulumi:"modules"`
	// A meaningful name to identify the database
	Name *string `pulumi:"name"`
	// Password used to access the database. If left empty, the password will be generated automatically
	Password *string `pulumi:"password"`
	// Path that will be used to store database backup files
	PeriodicBackupPath *string `pulumi:"periodicBackupPath"`
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol string `pulumi:"protocol"`
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
	// the URI provided is Redis Labs Cloud instance, only host and port should be provided
	ReplicaOfs []string `pulumi:"replicaOfs"`
	// Databases replication
	Replication *bool `pulumi:"replication"`
	// Set of CIDR addresses to allow access to the database
	SourceIps []string `pulumi:"sourceIps"`
	// Identifier of the subscription
	SubscriptionId int `pulumi:"subscriptionId"`
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi *bool `pulumi:"supportOssClusterApi"`
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy string `pulumi:"throughputMeasurementBy"`
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue int `pulumi:"throughputMeasurementValue"`
}

// The set of arguments for constructing a SubscriptionDatabase resource.
type SubscriptionDatabaseArgs struct {
	// Set of alerts to enable on the database
	Alerts SubscriptionDatabaseAlertArrayInput
	// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
	AverageItemSizeInBytes pulumi.IntPtrInput
	// SSL certificate to authenticate user connections
	ClientSslCertificate pulumi.StringPtrInput
	// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
	// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
	DataEviction pulumi.StringPtrInput
	// Rate of database data persistence (in persistent storage)
	DataPersistence pulumi.StringPtrInput
	// Use TLS for authentication
	EnableTls pulumi.BoolPtrInput
	// Should use the external endpoint for open-source (OSS) Cluster API
	ExternalEndpointForOssClusterApi pulumi.BoolPtrInput
	// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
	// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
	HashingPolicies pulumi.StringArrayInput
	// Maximum memory usage for this specific database
	MemoryLimitInGb pulumi.Float64Input
	// Modules to be provisioned in the database
	Modules SubscriptionDatabaseModuleArrayInput
	// A meaningful name to identify the database
	Name pulumi.StringPtrInput
	// Password used to access the database. If left empty, the password will be generated automatically
	Password pulumi.StringPtrInput
	// Path that will be used to store database backup files
	PeriodicBackupPath pulumi.StringPtrInput
	// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
	Protocol pulumi.StringInput
	// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
	// the URI provided is Redis Labs Cloud instance, only host and port should be provided
	ReplicaOfs pulumi.StringArrayInput
	// Databases replication
	Replication pulumi.BoolPtrInput
	// Set of CIDR addresses to allow access to the database
	SourceIps pulumi.StringArrayInput
	// Identifier of the subscription
	SubscriptionId pulumi.IntInput
	// Support Redis open-source (OSS) Cluster API
	SupportOssClusterApi pulumi.BoolPtrInput
	// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
	ThroughputMeasurementBy pulumi.StringInput
	// Throughput value (as applies to selected measurement method)
	ThroughputMeasurementValue pulumi.IntInput
}

func (SubscriptionDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionDatabaseArgs)(nil)).Elem()
}

type SubscriptionDatabaseInput interface {
	pulumi.Input

	ToSubscriptionDatabaseOutput() SubscriptionDatabaseOutput
	ToSubscriptionDatabaseOutputWithContext(ctx context.Context) SubscriptionDatabaseOutput
}

func (*SubscriptionDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDatabase)(nil)).Elem()
}

func (i *SubscriptionDatabase) ToSubscriptionDatabaseOutput() SubscriptionDatabaseOutput {
	return i.ToSubscriptionDatabaseOutputWithContext(context.Background())
}

func (i *SubscriptionDatabase) ToSubscriptionDatabaseOutputWithContext(ctx context.Context) SubscriptionDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseOutput)
}

// SubscriptionDatabaseArrayInput is an input type that accepts SubscriptionDatabaseArray and SubscriptionDatabaseArrayOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseArrayInput` via:
//
//	SubscriptionDatabaseArray{ SubscriptionDatabaseArgs{...} }
type SubscriptionDatabaseArrayInput interface {
	pulumi.Input

	ToSubscriptionDatabaseArrayOutput() SubscriptionDatabaseArrayOutput
	ToSubscriptionDatabaseArrayOutputWithContext(context.Context) SubscriptionDatabaseArrayOutput
}

type SubscriptionDatabaseArray []SubscriptionDatabaseInput

func (SubscriptionDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionDatabase)(nil)).Elem()
}

func (i SubscriptionDatabaseArray) ToSubscriptionDatabaseArrayOutput() SubscriptionDatabaseArrayOutput {
	return i.ToSubscriptionDatabaseArrayOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseArray) ToSubscriptionDatabaseArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseArrayOutput)
}

// SubscriptionDatabaseMapInput is an input type that accepts SubscriptionDatabaseMap and SubscriptionDatabaseMapOutput values.
// You can construct a concrete instance of `SubscriptionDatabaseMapInput` via:
//
//	SubscriptionDatabaseMap{ "key": SubscriptionDatabaseArgs{...} }
type SubscriptionDatabaseMapInput interface {
	pulumi.Input

	ToSubscriptionDatabaseMapOutput() SubscriptionDatabaseMapOutput
	ToSubscriptionDatabaseMapOutputWithContext(context.Context) SubscriptionDatabaseMapOutput
}

type SubscriptionDatabaseMap map[string]SubscriptionDatabaseInput

func (SubscriptionDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionDatabase)(nil)).Elem()
}

func (i SubscriptionDatabaseMap) ToSubscriptionDatabaseMapOutput() SubscriptionDatabaseMapOutput {
	return i.ToSubscriptionDatabaseMapOutputWithContext(context.Background())
}

func (i SubscriptionDatabaseMap) ToSubscriptionDatabaseMapOutputWithContext(ctx context.Context) SubscriptionDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionDatabaseMapOutput)
}

type SubscriptionDatabaseOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionDatabase)(nil)).Elem()
}

func (o SubscriptionDatabaseOutput) ToSubscriptionDatabaseOutput() SubscriptionDatabaseOutput {
	return o
}

func (o SubscriptionDatabaseOutput) ToSubscriptionDatabaseOutputWithContext(ctx context.Context) SubscriptionDatabaseOutput {
	return o
}

// Set of alerts to enable on the database
func (o SubscriptionDatabaseOutput) Alerts() SubscriptionDatabaseAlertArrayOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) SubscriptionDatabaseAlertArrayOutput { return v.Alerts }).(SubscriptionDatabaseAlertArrayOutput)
}

// Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
func (o SubscriptionDatabaseOutput) AverageItemSizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.IntPtrOutput { return v.AverageItemSizeInBytes }).(pulumi.IntPtrOutput)
}

// SSL certificate to authenticate user connections
func (o SubscriptionDatabaseOutput) ClientSslCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringPtrOutput { return v.ClientSslCertificate }).(pulumi.StringPtrOutput)
}

// (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
// 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
func (o SubscriptionDatabaseOutput) DataEviction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringPtrOutput { return v.DataEviction }).(pulumi.StringPtrOutput)
}

// Rate of database data persistence (in persistent storage)
func (o SubscriptionDatabaseOutput) DataPersistence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringPtrOutput { return v.DataPersistence }).(pulumi.StringPtrOutput)
}

// Identifier of the database created
func (o SubscriptionDatabaseOutput) DbId() pulumi.IntOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.IntOutput { return v.DbId }).(pulumi.IntOutput)
}

// Use TLS for authentication
func (o SubscriptionDatabaseOutput) EnableTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.BoolPtrOutput { return v.EnableTls }).(pulumi.BoolPtrOutput)
}

// Should use the external endpoint for open-source (OSS) Cluster API
func (o SubscriptionDatabaseOutput) ExternalEndpointForOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.BoolPtrOutput { return v.ExternalEndpointForOssClusterApi }).(pulumi.BoolPtrOutput)
}

// List of regular expression rules to shard the database by. See the documentation on clustering for more information on
// the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
func (o SubscriptionDatabaseOutput) HashingPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringArrayOutput { return v.HashingPolicies }).(pulumi.StringArrayOutput)
}

// Maximum memory usage for this specific database
func (o SubscriptionDatabaseOutput) MemoryLimitInGb() pulumi.Float64Output {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.Float64Output { return v.MemoryLimitInGb }).(pulumi.Float64Output)
}

// Modules to be provisioned in the database
func (o SubscriptionDatabaseOutput) Modules() SubscriptionDatabaseModuleArrayOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) SubscriptionDatabaseModuleArrayOutput { return v.Modules }).(SubscriptionDatabaseModuleArrayOutput)
}

// A meaningful name to identify the database
func (o SubscriptionDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password used to access the database. If left empty, the password will be generated automatically
func (o SubscriptionDatabaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Path that will be used to store database backup files
func (o SubscriptionDatabaseOutput) PeriodicBackupPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringPtrOutput { return v.PeriodicBackupPath }).(pulumi.StringPtrOutput)
}

// Private endpoint to access the database
func (o SubscriptionDatabaseOutput) PrivateEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.PrivateEndpoint }).(pulumi.StringOutput)
}

// The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
func (o SubscriptionDatabaseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Public endpoint to access the database
func (o SubscriptionDatabaseOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.PublicEndpoint }).(pulumi.StringOutput)
}

// Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
// the URI provided is Redis Labs Cloud instance, only host and port should be provided
func (o SubscriptionDatabaseOutput) ReplicaOfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringArrayOutput { return v.ReplicaOfs }).(pulumi.StringArrayOutput)
}

// Databases replication
func (o SubscriptionDatabaseOutput) Replication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.BoolPtrOutput { return v.Replication }).(pulumi.BoolPtrOutput)
}

// Set of CIDR addresses to allow access to the database
func (o SubscriptionDatabaseOutput) SourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringArrayOutput { return v.SourceIps }).(pulumi.StringArrayOutput)
}

// Identifier of the subscription
func (o SubscriptionDatabaseOutput) SubscriptionId() pulumi.IntOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.IntOutput { return v.SubscriptionId }).(pulumi.IntOutput)
}

// Support Redis open-source (OSS) Cluster API
func (o SubscriptionDatabaseOutput) SupportOssClusterApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.BoolPtrOutput { return v.SupportOssClusterApi }).(pulumi.BoolPtrOutput)
}

// Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
func (o SubscriptionDatabaseOutput) ThroughputMeasurementBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.StringOutput { return v.ThroughputMeasurementBy }).(pulumi.StringOutput)
}

// Throughput value (as applies to selected measurement method)
func (o SubscriptionDatabaseOutput) ThroughputMeasurementValue() pulumi.IntOutput {
	return o.ApplyT(func(v *SubscriptionDatabase) pulumi.IntOutput { return v.ThroughputMeasurementValue }).(pulumi.IntOutput)
}

type SubscriptionDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionDatabase)(nil)).Elem()
}

func (o SubscriptionDatabaseArrayOutput) ToSubscriptionDatabaseArrayOutput() SubscriptionDatabaseArrayOutput {
	return o
}

func (o SubscriptionDatabaseArrayOutput) ToSubscriptionDatabaseArrayOutputWithContext(ctx context.Context) SubscriptionDatabaseArrayOutput {
	return o
}

func (o SubscriptionDatabaseArrayOutput) Index(i pulumi.IntInput) SubscriptionDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionDatabase {
		return vs[0].([]*SubscriptionDatabase)[vs[1].(int)]
	}).(SubscriptionDatabaseOutput)
}

type SubscriptionDatabaseMapOutput struct{ *pulumi.OutputState }

func (SubscriptionDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionDatabase)(nil)).Elem()
}

func (o SubscriptionDatabaseMapOutput) ToSubscriptionDatabaseMapOutput() SubscriptionDatabaseMapOutput {
	return o
}

func (o SubscriptionDatabaseMapOutput) ToSubscriptionDatabaseMapOutputWithContext(ctx context.Context) SubscriptionDatabaseMapOutput {
	return o
}

func (o SubscriptionDatabaseMapOutput) MapIndex(k pulumi.StringInput) SubscriptionDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionDatabase {
		return vs[0].(map[string]*SubscriptionDatabase)[vs[1].(string)]
	}).(SubscriptionDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseInput)(nil)).Elem(), &SubscriptionDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseArrayInput)(nil)).Elem(), SubscriptionDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionDatabaseMapInput)(nil)).Elem(), SubscriptionDatabaseMap{})
	pulumi.RegisterOutputType(SubscriptionDatabaseOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionDatabaseMapOutput{})
}
