// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The User data source allows access to an existing Rule within your Redis Enterprise Cloud Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := rediscloud.LookupAclUser(ctx, &rediscloud.LookupAclUserArgs{
//				Name: "fast-admin-john",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("rediscloudAclUser", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupAclUser(ctx *pulumi.Context, args *LookupAclUserArgs, opts ...pulumi.InvokeOption) (*LookupAclUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclUserResult
	err := ctx.Invoke("rediscloud:index/getAclUser:getAclUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAclUser.
type LookupAclUserArgs struct {
	// The name of the User to filter returned subscriptions
	Name string `pulumi:"name"`
}

// A collection of values returned by getAclUser.
type LookupAclUserResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The User's name.
	Name string `pulumi:"name"`
	// The name of the User's Role.
	Role string `pulumi:"role"`
}

func LookupAclUserOutput(ctx *pulumi.Context, args LookupAclUserOutputArgs, opts ...pulumi.InvokeOption) LookupAclUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclUserResult, error) {
			args := v.(LookupAclUserArgs)
			r, err := LookupAclUser(ctx, &args, opts...)
			var s LookupAclUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclUserResultOutput)
}

// A collection of arguments for invoking getAclUser.
type LookupAclUserOutputArgs struct {
	// The name of the User to filter returned subscriptions
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAclUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclUserArgs)(nil)).Elem()
}

// A collection of values returned by getAclUser.
type LookupAclUserResultOutput struct{ *pulumi.OutputState }

func (LookupAclUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclUserResult)(nil)).Elem()
}

func (o LookupAclUserResultOutput) ToLookupAclUserResultOutput() LookupAclUserResultOutput {
	return o
}

func (o LookupAclUserResultOutput) ToLookupAclUserResultOutputWithContext(ctx context.Context) LookupAclUserResultOutput {
	return o
}

func (o LookupAclUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAclUserResult] {
	return pulumix.Output[LookupAclUserResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAclUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The User's name.
func (o LookupAclUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the User's Role.
func (o LookupAclUserResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclUserResult) string { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclUserResultOutput{})
}
