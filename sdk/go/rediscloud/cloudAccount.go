// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Cloud Account resource representing the access credentials to a cloud provider account, (`AWS`).
// Redis Enterprise Cloud uses these credentials to provision databases within your infrastructure.
//
// ## Example Usage
//
// The following example defines a new AWS Cloud Account that is then used with a Subscription.
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCloudAccount, err := rediscloud.NewCloudAccount(ctx, "exampleCloudAccount", &rediscloud.CloudAccountArgs{
//				AccessKeyId:     pulumi.String("abcdefg"),
//				AccessSecretKey: pulumi.String("9876543"),
//				ConsoleUsername: pulumi.String("username"),
//				ConsolePassword: pulumi.String("password"),
//				ProviderType:    pulumi.String("AWS"),
//				SignInLoginUrl:  pulumi.String("https://1234567890.signin.aws.amazon.com/console"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rediscloud.NewSubscription(ctx, "exampleSubscription", &rediscloud.SubscriptionArgs{
//				PaymentMethodId: pulumi.Any(data.Rediscloud_payment_method.Card.Id),
//				MemoryStorage:   pulumi.String("ram"),
//				CloudProvider: &rediscloud.SubscriptionCloudProviderArgs{
//					Provider:       exampleCloudAccount.ProviderType,
//					CloudAccountId: exampleCloudAccount.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `rediscloud_cloud_account` can be imported using the ID of the Cloud Account, e.g.
//
// ```sh
//
//	$ pulumi import rediscloud:index/cloudAccount:CloudAccount example 12345678
//
// ```
type CloudAccount struct {
	pulumi.CustomResourceState

	// Cloud provider access key.
	AccessKeyId pulumi.StringOutput `pulumi:"accessKeyId"`
	// Cloud provider secret key.
	// Note that drift cannot currently be detected for this.
	AccessSecretKey pulumi.StringOutput `pulumi:"accessSecretKey"`
	// Cloud provider management console password.
	// Note that drift cannot currently be detected for this.
	ConsolePassword pulumi.StringOutput `pulumi:"consolePassword"`
	// Cloud provider management console username.
	// Note that drift cannot currently be detected for this.
	ConsoleUsername pulumi.StringOutput `pulumi:"consoleUsername"`
	// Display name of the account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Cloud provider type - either `AWS` or `GCP`.
	// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// Cloud provider management console login URL.
	// Note that drift cannot currently be detected for this.
	SignInLoginUrl pulumi.StringOutput `pulumi:"signInLoginUrl"`
	// The current status of the account - `draft`, `pending` or `active`
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCloudAccount registers a new resource with the given unique name, arguments, and options.
func NewCloudAccount(ctx *pulumi.Context,
	name string, args *CloudAccountArgs, opts ...pulumi.ResourceOption) (*CloudAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKeyId == nil {
		return nil, errors.New("invalid value for required argument 'AccessKeyId'")
	}
	if args.AccessSecretKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessSecretKey'")
	}
	if args.ConsolePassword == nil {
		return nil, errors.New("invalid value for required argument 'ConsolePassword'")
	}
	if args.ConsoleUsername == nil {
		return nil, errors.New("invalid value for required argument 'ConsoleUsername'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	if args.SignInLoginUrl == nil {
		return nil, errors.New("invalid value for required argument 'SignInLoginUrl'")
	}
	if args.AccessSecretKey != nil {
		args.AccessSecretKey = pulumi.ToSecret(args.AccessSecretKey).(pulumi.StringInput)
	}
	if args.ConsolePassword != nil {
		args.ConsolePassword = pulumi.ToSecret(args.ConsolePassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessSecretKey",
		"consolePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudAccount
	err := ctx.RegisterResource("rediscloud:index/cloudAccount:CloudAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudAccount gets an existing CloudAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudAccountState, opts ...pulumi.ResourceOption) (*CloudAccount, error) {
	var resource CloudAccount
	err := ctx.ReadResource("rediscloud:index/cloudAccount:CloudAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudAccount resources.
type cloudAccountState struct {
	// Cloud provider access key.
	AccessKeyId *string `pulumi:"accessKeyId"`
	// Cloud provider secret key.
	// Note that drift cannot currently be detected for this.
	AccessSecretKey *string `pulumi:"accessSecretKey"`
	// Cloud provider management console password.
	// Note that drift cannot currently be detected for this.
	ConsolePassword *string `pulumi:"consolePassword"`
	// Cloud provider management console username.
	// Note that drift cannot currently be detected for this.
	ConsoleUsername *string `pulumi:"consoleUsername"`
	// Display name of the account.
	Name *string `pulumi:"name"`
	// Cloud provider type - either `AWS` or `GCP`.
	// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
	ProviderType *string `pulumi:"providerType"`
	// Cloud provider management console login URL.
	// Note that drift cannot currently be detected for this.
	SignInLoginUrl *string `pulumi:"signInLoginUrl"`
	// The current status of the account - `draft`, `pending` or `active`
	Status *string `pulumi:"status"`
}

type CloudAccountState struct {
	// Cloud provider access key.
	AccessKeyId pulumi.StringPtrInput
	// Cloud provider secret key.
	// Note that drift cannot currently be detected for this.
	AccessSecretKey pulumi.StringPtrInput
	// Cloud provider management console password.
	// Note that drift cannot currently be detected for this.
	ConsolePassword pulumi.StringPtrInput
	// Cloud provider management console username.
	// Note that drift cannot currently be detected for this.
	ConsoleUsername pulumi.StringPtrInput
	// Display name of the account.
	Name pulumi.StringPtrInput
	// Cloud provider type - either `AWS` or `GCP`.
	// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
	ProviderType pulumi.StringPtrInput
	// Cloud provider management console login URL.
	// Note that drift cannot currently be detected for this.
	SignInLoginUrl pulumi.StringPtrInput
	// The current status of the account - `draft`, `pending` or `active`
	Status pulumi.StringPtrInput
}

func (CloudAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccountState)(nil)).Elem()
}

type cloudAccountArgs struct {
	// Cloud provider access key.
	AccessKeyId string `pulumi:"accessKeyId"`
	// Cloud provider secret key.
	// Note that drift cannot currently be detected for this.
	AccessSecretKey string `pulumi:"accessSecretKey"`
	// Cloud provider management console password.
	// Note that drift cannot currently be detected for this.
	ConsolePassword string `pulumi:"consolePassword"`
	// Cloud provider management console username.
	// Note that drift cannot currently be detected for this.
	ConsoleUsername string `pulumi:"consoleUsername"`
	// Display name of the account.
	Name *string `pulumi:"name"`
	// Cloud provider type - either `AWS` or `GCP`.
	// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
	ProviderType string `pulumi:"providerType"`
	// Cloud provider management console login URL.
	// Note that drift cannot currently be detected for this.
	SignInLoginUrl string `pulumi:"signInLoginUrl"`
}

// The set of arguments for constructing a CloudAccount resource.
type CloudAccountArgs struct {
	// Cloud provider access key.
	AccessKeyId pulumi.StringInput
	// Cloud provider secret key.
	// Note that drift cannot currently be detected for this.
	AccessSecretKey pulumi.StringInput
	// Cloud provider management console password.
	// Note that drift cannot currently be detected for this.
	ConsolePassword pulumi.StringInput
	// Cloud provider management console username.
	// Note that drift cannot currently be detected for this.
	ConsoleUsername pulumi.StringInput
	// Display name of the account.
	Name pulumi.StringPtrInput
	// Cloud provider type - either `AWS` or `GCP`.
	// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
	ProviderType pulumi.StringInput
	// Cloud provider management console login URL.
	// Note that drift cannot currently be detected for this.
	SignInLoginUrl pulumi.StringInput
}

func (CloudAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccountArgs)(nil)).Elem()
}

type CloudAccountInput interface {
	pulumi.Input

	ToCloudAccountOutput() CloudAccountOutput
	ToCloudAccountOutputWithContext(ctx context.Context) CloudAccountOutput
}

func (*CloudAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAccount)(nil)).Elem()
}

func (i *CloudAccount) ToCloudAccountOutput() CloudAccountOutput {
	return i.ToCloudAccountOutputWithContext(context.Background())
}

func (i *CloudAccount) ToCloudAccountOutputWithContext(ctx context.Context) CloudAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccountOutput)
}

func (i *CloudAccount) ToOutput(ctx context.Context) pulumix.Output[*CloudAccount] {
	return pulumix.Output[*CloudAccount]{
		OutputState: i.ToCloudAccountOutputWithContext(ctx).OutputState,
	}
}

// CloudAccountArrayInput is an input type that accepts CloudAccountArray and CloudAccountArrayOutput values.
// You can construct a concrete instance of `CloudAccountArrayInput` via:
//
//	CloudAccountArray{ CloudAccountArgs{...} }
type CloudAccountArrayInput interface {
	pulumi.Input

	ToCloudAccountArrayOutput() CloudAccountArrayOutput
	ToCloudAccountArrayOutputWithContext(context.Context) CloudAccountArrayOutput
}

type CloudAccountArray []CloudAccountInput

func (CloudAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudAccount)(nil)).Elem()
}

func (i CloudAccountArray) ToCloudAccountArrayOutput() CloudAccountArrayOutput {
	return i.ToCloudAccountArrayOutputWithContext(context.Background())
}

func (i CloudAccountArray) ToCloudAccountArrayOutputWithContext(ctx context.Context) CloudAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccountArrayOutput)
}

func (i CloudAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]*CloudAccount] {
	return pulumix.Output[[]*CloudAccount]{
		OutputState: i.ToCloudAccountArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudAccountMapInput is an input type that accepts CloudAccountMap and CloudAccountMapOutput values.
// You can construct a concrete instance of `CloudAccountMapInput` via:
//
//	CloudAccountMap{ "key": CloudAccountArgs{...} }
type CloudAccountMapInput interface {
	pulumi.Input

	ToCloudAccountMapOutput() CloudAccountMapOutput
	ToCloudAccountMapOutputWithContext(context.Context) CloudAccountMapOutput
}

type CloudAccountMap map[string]CloudAccountInput

func (CloudAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudAccount)(nil)).Elem()
}

func (i CloudAccountMap) ToCloudAccountMapOutput() CloudAccountMapOutput {
	return i.ToCloudAccountMapOutputWithContext(context.Background())
}

func (i CloudAccountMap) ToCloudAccountMapOutputWithContext(ctx context.Context) CloudAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccountMapOutput)
}

func (i CloudAccountMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudAccount] {
	return pulumix.Output[map[string]*CloudAccount]{
		OutputState: i.ToCloudAccountMapOutputWithContext(ctx).OutputState,
	}
}

type CloudAccountOutput struct{ *pulumi.OutputState }

func (CloudAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAccount)(nil)).Elem()
}

func (o CloudAccountOutput) ToCloudAccountOutput() CloudAccountOutput {
	return o
}

func (o CloudAccountOutput) ToCloudAccountOutputWithContext(ctx context.Context) CloudAccountOutput {
	return o
}

func (o CloudAccountOutput) ToOutput(ctx context.Context) pulumix.Output[*CloudAccount] {
	return pulumix.Output[*CloudAccount]{
		OutputState: o.OutputState,
	}
}

// Cloud provider access key.
func (o CloudAccountOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.AccessKeyId }).(pulumi.StringOutput)
}

// Cloud provider secret key.
// Note that drift cannot currently be detected for this.
func (o CloudAccountOutput) AccessSecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.AccessSecretKey }).(pulumi.StringOutput)
}

// Cloud provider management console password.
// Note that drift cannot currently be detected for this.
func (o CloudAccountOutput) ConsolePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.ConsolePassword }).(pulumi.StringOutput)
}

// Cloud provider management console username.
// Note that drift cannot currently be detected for this.
func (o CloudAccountOutput) ConsoleUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.ConsoleUsername }).(pulumi.StringOutput)
}

// Display name of the account.
func (o CloudAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Cloud provider type - either `AWS` or `GCP`.
// Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
func (o CloudAccountOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// Cloud provider management console login URL.
// Note that drift cannot currently be detected for this.
func (o CloudAccountOutput) SignInLoginUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.SignInLoginUrl }).(pulumi.StringOutput)
}

// The current status of the account - `draft`, `pending` or `active`
func (o CloudAccountOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudAccount) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CloudAccountArrayOutput struct{ *pulumi.OutputState }

func (CloudAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudAccount)(nil)).Elem()
}

func (o CloudAccountArrayOutput) ToCloudAccountArrayOutput() CloudAccountArrayOutput {
	return o
}

func (o CloudAccountArrayOutput) ToCloudAccountArrayOutputWithContext(ctx context.Context) CloudAccountArrayOutput {
	return o
}

func (o CloudAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudAccount] {
	return pulumix.Output[[]*CloudAccount]{
		OutputState: o.OutputState,
	}
}

func (o CloudAccountArrayOutput) Index(i pulumi.IntInput) CloudAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudAccount {
		return vs[0].([]*CloudAccount)[vs[1].(int)]
	}).(CloudAccountOutput)
}

type CloudAccountMapOutput struct{ *pulumi.OutputState }

func (CloudAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudAccount)(nil)).Elem()
}

func (o CloudAccountMapOutput) ToCloudAccountMapOutput() CloudAccountMapOutput {
	return o
}

func (o CloudAccountMapOutput) ToCloudAccountMapOutputWithContext(ctx context.Context) CloudAccountMapOutput {
	return o
}

func (o CloudAccountMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudAccount] {
	return pulumix.Output[map[string]*CloudAccount]{
		OutputState: o.OutputState,
	}
}

func (o CloudAccountMapOutput) MapIndex(k pulumi.StringInput) CloudAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudAccount {
		return vs[0].(map[string]*CloudAccount)[vs[1].(string)]
	}).(CloudAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccountInput)(nil)).Elem(), &CloudAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccountArrayInput)(nil)).Elem(), CloudAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccountMapInput)(nil)).Elem(), CloudAccountMap{})
	pulumi.RegisterOutputType(CloudAccountOutput{})
	pulumi.RegisterOutputType(CloudAccountArrayOutput{})
	pulumi.RegisterOutputType(CloudAccountMapOutput{})
}
