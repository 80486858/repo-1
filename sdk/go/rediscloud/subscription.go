// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/RedisLabs/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi-rediscloud/sdk/go/rediscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			card, err := rediscloud.GetPaymentMethod(ctx, &GetPaymentMethodArgs{
//				CardType: pulumi.StringRef("Visa"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = rediscloud.NewSubscription(ctx, "subscription-resource", &rediscloud.SubscriptionArgs{
//				PaymentMethod:   pulumi.String("credit-card"),
//				PaymentMethodId: pulumi.String(card.Id),
//				MemoryStorage:   pulumi.String("ram"),
//				CloudProvider: &SubscriptionCloudProviderArgs{
//					Provider: pulumi.Any(data.Rediscloud_cloud_account.Account.Provider_type),
//					Regions: SubscriptionCloudProviderRegionArray{
//						&SubscriptionCloudProviderRegionArgs{
//							Region:                    pulumi.String("eu-west-1"),
//							MultipleAvailabilityZones: pulumi.Bool(true),
//							NetworkingDeploymentCidr:  pulumi.String("10.0.0.0/24"),
//							PreferredAvailabilityZones: pulumi.StringArray{
//								pulumi.String("euw1-az1, euw1-az2, euw1-az3"),
//							},
//						},
//					},
//				},
//				CreationPlan: &SubscriptionCreationPlanArgs{
//					MemoryLimitInGb:            pulumi.Float64(2),
//					Quantity:                   pulumi.Int(1),
//					Replication:                pulumi.Bool(false),
//					SupportOssClusterApi:       pulumi.Bool(false),
//					ThroughputMeasurementBy:    pulumi.String("operations-per-second"),
//					ThroughputMeasurementValue: pulumi.Int(10000),
//					Modules: pulumi.StringArray{
//						pulumi.String("RediSearch"),
//						pulumi.String("RedisBloom"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// `rediscloud_subscription` can be imported using the ID of the subscription, e.g.
//
// ```sh
//
//	$ pulumi import rediscloud:index/subscription:Subscription subscription-resource 12345678
//
// ```
type Subscription struct {
	pulumi.CustomResourceState

	// An allowlist object, documented below
	Allowlist SubscriptionAllowlistPtrOutput `pulumi:"allowlist"`
	// A cloud provider object, documented below
	CloudProvider SubscriptionCloudProviderOutput `pulumi:"cloudProvider"`
	// A creation plan object, documented below
	CreationPlan SubscriptionCreationPlanPtrOutput `pulumi:"creationPlan"`
	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
	MemoryStorage pulumi.StringPtrOutput `pulumi:"memoryStorage"`
	// A meaningful name to identify the subscription
	Name pulumi.StringOutput `pulumi:"name"`
	// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
	PaymentMethod pulumi.StringPtrOutput `pulumi:"paymentMethod"`
	// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
	PaymentMethodId pulumi.StringOutput `pulumi:"paymentMethodId"`
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOption) (*Subscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Subscription
	err := ctx.RegisterResource("rediscloud:index/subscription:Subscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionState, opts ...pulumi.ResourceOption) (*Subscription, error) {
	var resource Subscription
	err := ctx.ReadResource("rediscloud:index/subscription:Subscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscription resources.
type subscriptionState struct {
	// An allowlist object, documented below
	Allowlist *SubscriptionAllowlist `pulumi:"allowlist"`
	// A cloud provider object, documented below
	CloudProvider *SubscriptionCloudProvider `pulumi:"cloudProvider"`
	// A creation plan object, documented below
	CreationPlan *SubscriptionCreationPlan `pulumi:"creationPlan"`
	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
	MemoryStorage *string `pulumi:"memoryStorage"`
	// A meaningful name to identify the subscription
	Name *string `pulumi:"name"`
	// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
	PaymentMethod *string `pulumi:"paymentMethod"`
	// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
	PaymentMethodId *string `pulumi:"paymentMethodId"`
}

type SubscriptionState struct {
	// An allowlist object, documented below
	Allowlist SubscriptionAllowlistPtrInput
	// A cloud provider object, documented below
	CloudProvider SubscriptionCloudProviderPtrInput
	// A creation plan object, documented below
	CreationPlan SubscriptionCreationPlanPtrInput
	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
	MemoryStorage pulumi.StringPtrInput
	// A meaningful name to identify the subscription
	Name pulumi.StringPtrInput
	// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
	PaymentMethod pulumi.StringPtrInput
	// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
	PaymentMethodId pulumi.StringPtrInput
}

func (SubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionState)(nil)).Elem()
}

type subscriptionArgs struct {
	// An allowlist object, documented below
	Allowlist *SubscriptionAllowlist `pulumi:"allowlist"`
	// A cloud provider object, documented below
	CloudProvider SubscriptionCloudProvider `pulumi:"cloudProvider"`
	// A creation plan object, documented below
	CreationPlan *SubscriptionCreationPlan `pulumi:"creationPlan"`
	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
	MemoryStorage *string `pulumi:"memoryStorage"`
	// A meaningful name to identify the subscription
	Name *string `pulumi:"name"`
	// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
	PaymentMethod *string `pulumi:"paymentMethod"`
	// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
	PaymentMethodId *string `pulumi:"paymentMethodId"`
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// An allowlist object, documented below
	Allowlist SubscriptionAllowlistPtrInput
	// A cloud provider object, documented below
	CloudProvider SubscriptionCloudProviderInput
	// A creation plan object, documented below
	CreationPlan SubscriptionCreationPlanPtrInput
	// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
	MemoryStorage pulumi.StringPtrInput
	// A meaningful name to identify the subscription
	Name pulumi.StringPtrInput
	// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
	PaymentMethod pulumi.StringPtrInput
	// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
	PaymentMethodId pulumi.StringPtrInput
}

func (SubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionArgs)(nil)).Elem()
}

type SubscriptionInput interface {
	pulumi.Input

	ToSubscriptionOutput() SubscriptionOutput
	ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput
}

func (*Subscription) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (i *Subscription) ToSubscriptionOutput() SubscriptionOutput {
	return i.ToSubscriptionOutputWithContext(context.Background())
}

func (i *Subscription) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionOutput)
}

// SubscriptionArrayInput is an input type that accepts SubscriptionArray and SubscriptionArrayOutput values.
// You can construct a concrete instance of `SubscriptionArrayInput` via:
//
//	SubscriptionArray{ SubscriptionArgs{...} }
type SubscriptionArrayInput interface {
	pulumi.Input

	ToSubscriptionArrayOutput() SubscriptionArrayOutput
	ToSubscriptionArrayOutputWithContext(context.Context) SubscriptionArrayOutput
}

type SubscriptionArray []SubscriptionInput

func (SubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscription)(nil)).Elem()
}

func (i SubscriptionArray) ToSubscriptionArrayOutput() SubscriptionArrayOutput {
	return i.ToSubscriptionArrayOutputWithContext(context.Background())
}

func (i SubscriptionArray) ToSubscriptionArrayOutputWithContext(ctx context.Context) SubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionArrayOutput)
}

// SubscriptionMapInput is an input type that accepts SubscriptionMap and SubscriptionMapOutput values.
// You can construct a concrete instance of `SubscriptionMapInput` via:
//
//	SubscriptionMap{ "key": SubscriptionArgs{...} }
type SubscriptionMapInput interface {
	pulumi.Input

	ToSubscriptionMapOutput() SubscriptionMapOutput
	ToSubscriptionMapOutputWithContext(context.Context) SubscriptionMapOutput
}

type SubscriptionMap map[string]SubscriptionInput

func (SubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscription)(nil)).Elem()
}

func (i SubscriptionMap) ToSubscriptionMapOutput() SubscriptionMapOutput {
	return i.ToSubscriptionMapOutputWithContext(context.Background())
}

func (i SubscriptionMap) ToSubscriptionMapOutputWithContext(ctx context.Context) SubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionMapOutput)
}

type SubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (o SubscriptionOutput) ToSubscriptionOutput() SubscriptionOutput {
	return o
}

func (o SubscriptionOutput) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return o
}

// An allowlist object, documented below
func (o SubscriptionOutput) Allowlist() SubscriptionAllowlistPtrOutput {
	return o.ApplyT(func(v *Subscription) SubscriptionAllowlistPtrOutput { return v.Allowlist }).(SubscriptionAllowlistPtrOutput)
}

// A cloud provider object, documented below
func (o SubscriptionOutput) CloudProvider() SubscriptionCloudProviderOutput {
	return o.ApplyT(func(v *Subscription) SubscriptionCloudProviderOutput { return v.CloudProvider }).(SubscriptionCloudProviderOutput)
}

// A creation plan object, documented below
func (o SubscriptionOutput) CreationPlan() SubscriptionCreationPlanPtrOutput {
	return o.ApplyT(func(v *Subscription) SubscriptionCreationPlanPtrOutput { return v.CreationPlan }).(SubscriptionCreationPlanPtrOutput)
}

// Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’
func (o SubscriptionOutput) MemoryStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.MemoryStorage }).(pulumi.StringPtrOutput)
}

// A meaningful name to identify the subscription
func (o SubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `paymentMethodId` must be defined. Default: 'credit-card'
func (o SubscriptionOutput) PaymentMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.PaymentMethod }).(pulumi.StringPtrOutput)
}

// A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
func (o SubscriptionOutput) PaymentMethodId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.PaymentMethodId }).(pulumi.StringOutput)
}

type SubscriptionArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subscription)(nil)).Elem()
}

func (o SubscriptionArrayOutput) ToSubscriptionArrayOutput() SubscriptionArrayOutput {
	return o
}

func (o SubscriptionArrayOutput) ToSubscriptionArrayOutputWithContext(ctx context.Context) SubscriptionArrayOutput {
	return o
}

func (o SubscriptionArrayOutput) Index(i pulumi.IntInput) SubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subscription {
		return vs[0].([]*Subscription)[vs[1].(int)]
	}).(SubscriptionOutput)
}

type SubscriptionMapOutput struct{ *pulumi.OutputState }

func (SubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subscription)(nil)).Elem()
}

func (o SubscriptionMapOutput) ToSubscriptionMapOutput() SubscriptionMapOutput {
	return o
}

func (o SubscriptionMapOutput) ToSubscriptionMapOutputWithContext(ctx context.Context) SubscriptionMapOutput {
	return o
}

func (o SubscriptionMapOutput) MapIndex(k pulumi.StringInput) SubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subscription {
		return vs[0].(map[string]*Subscription)[vs[1].(string)]
	}).(SubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionInput)(nil)).Elem(), &Subscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionArrayInput)(nil)).Elem(), SubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionMapInput)(nil)).Elem(), SubscriptionMap{})
	pulumi.RegisterOutputType(SubscriptionOutput{})
	pulumi.RegisterOutputType(SubscriptionArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionMapOutput{})
}
