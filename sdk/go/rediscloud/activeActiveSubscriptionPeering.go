// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rediscloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActiveActiveSubscriptionPeering struct {
	pulumi.CustomResourceState

	// AWS account id that the VPC to be peered lives in
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// Identifier of the AWS cloud peering
	AwsPeeringId pulumi.StringOutput `pulumi:"awsPeeringId"`
	// AWS Region that the VPC to be peered lives in
	DestinationRegion pulumi.StringOutput `pulumi:"destinationRegion"`
	// The name of the network to be peered
	GcpNetworkName pulumi.StringOutput `pulumi:"gcpNetworkName"`
	// Identifier of the cloud peering
	GcpPeeringId pulumi.StringOutput `pulumi:"gcpPeeringId"`
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// The name of the Redis Enterprise Cloud network to be peered
	GcpRedisNetworkName pulumi.StringOutput `pulumi:"gcpRedisNetworkName"`
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GcpRedisProjectId pulumi.StringOutput `pulumi:"gcpRedisProjectId"`
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName pulumi.StringPtrOutput `pulumi:"providerName"`
	// AWS or GCP Region that the VPC to be peered lives in
	SourceRegion pulumi.StringOutput `pulumi:"sourceRegion"`
	// Current status of the account - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`
	Status pulumi.StringOutput `pulumi:"status"`
	// A valid subscription predefined in the current account
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// CIDR range of the VPC to be peered
	VpcCidr pulumi.StringPtrOutput `pulumi:"vpcCidr"`
	// Identifier of the VPC to be peered
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewActiveActiveSubscriptionPeering registers a new resource with the given unique name, arguments, and options.
func NewActiveActiveSubscriptionPeering(ctx *pulumi.Context,
	name string, args *ActiveActiveSubscriptionPeeringArgs, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	var resource ActiveActiveSubscriptionPeering
	err := ctx.RegisterResource("rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveActiveSubscriptionPeering gets an existing ActiveActiveSubscriptionPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveActiveSubscriptionPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveActiveSubscriptionPeeringState, opts ...pulumi.ResourceOption) (*ActiveActiveSubscriptionPeering, error) {
	var resource ActiveActiveSubscriptionPeering
	err := ctx.ReadResource("rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveActiveSubscriptionPeering resources.
type activeActiveSubscriptionPeeringState struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId *string `pulumi:"awsAccountId"`
	// Identifier of the AWS cloud peering
	AwsPeeringId *string `pulumi:"awsPeeringId"`
	// AWS Region that the VPC to be peered lives in
	DestinationRegion *string `pulumi:"destinationRegion"`
	// The name of the network to be peered
	GcpNetworkName *string `pulumi:"gcpNetworkName"`
	// Identifier of the cloud peering
	GcpPeeringId *string `pulumi:"gcpPeeringId"`
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// The name of the Redis Enterprise Cloud network to be peered
	GcpRedisNetworkName *string `pulumi:"gcpRedisNetworkName"`
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GcpRedisProjectId *string `pulumi:"gcpRedisProjectId"`
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName *string `pulumi:"providerName"`
	// AWS or GCP Region that the VPC to be peered lives in
	SourceRegion *string `pulumi:"sourceRegion"`
	// Current status of the account - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`
	Status *string `pulumi:"status"`
	// A valid subscription predefined in the current account
	SubscriptionId *string `pulumi:"subscriptionId"`
	// CIDR range of the VPC to be peered
	VpcCidr *string `pulumi:"vpcCidr"`
	// Identifier of the VPC to be peered
	VpcId *string `pulumi:"vpcId"`
}

type ActiveActiveSubscriptionPeeringState struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId pulumi.StringPtrInput
	// Identifier of the AWS cloud peering
	AwsPeeringId pulumi.StringPtrInput
	// AWS Region that the VPC to be peered lives in
	DestinationRegion pulumi.StringPtrInput
	// The name of the network to be peered
	GcpNetworkName pulumi.StringPtrInput
	// Identifier of the cloud peering
	GcpPeeringId pulumi.StringPtrInput
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId pulumi.StringPtrInput
	// The name of the Redis Enterprise Cloud network to be peered
	GcpRedisNetworkName pulumi.StringPtrInput
	// Identifier of the Redis Enterprise Cloud GCP project to be peered
	GcpRedisProjectId pulumi.StringPtrInput
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName pulumi.StringPtrInput
	// AWS or GCP Region that the VPC to be peered lives in
	SourceRegion pulumi.StringPtrInput
	// Current status of the account - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`
	Status pulumi.StringPtrInput
	// A valid subscription predefined in the current account
	SubscriptionId pulumi.StringPtrInput
	// CIDR range of the VPC to be peered
	VpcCidr pulumi.StringPtrInput
	// Identifier of the VPC to be peered
	VpcId pulumi.StringPtrInput
}

func (ActiveActiveSubscriptionPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionPeeringState)(nil)).Elem()
}

type activeActiveSubscriptionPeeringArgs struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId *string `pulumi:"awsAccountId"`
	// AWS Region that the VPC to be peered lives in
	DestinationRegion *string `pulumi:"destinationRegion"`
	// The name of the network to be peered
	GcpNetworkName *string `pulumi:"gcpNetworkName"`
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName *string `pulumi:"providerName"`
	// AWS or GCP Region that the VPC to be peered lives in
	SourceRegion *string `pulumi:"sourceRegion"`
	// A valid subscription predefined in the current account
	SubscriptionId string `pulumi:"subscriptionId"`
	// CIDR range of the VPC to be peered
	VpcCidr *string `pulumi:"vpcCidr"`
	// Identifier of the VPC to be peered
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ActiveActiveSubscriptionPeering resource.
type ActiveActiveSubscriptionPeeringArgs struct {
	// AWS account id that the VPC to be peered lives in
	AwsAccountId pulumi.StringPtrInput
	// AWS Region that the VPC to be peered lives in
	DestinationRegion pulumi.StringPtrInput
	// The name of the network to be peered
	GcpNetworkName pulumi.StringPtrInput
	// GCP project ID that the VPC to be peered lives in
	GcpProjectId pulumi.StringPtrInput
	// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
	ProviderName pulumi.StringPtrInput
	// AWS or GCP Region that the VPC to be peered lives in
	SourceRegion pulumi.StringPtrInput
	// A valid subscription predefined in the current account
	SubscriptionId pulumi.StringInput
	// CIDR range of the VPC to be peered
	VpcCidr pulumi.StringPtrInput
	// Identifier of the VPC to be peered
	VpcId pulumi.StringPtrInput
}

func (ActiveActiveSubscriptionPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeActiveSubscriptionPeeringArgs)(nil)).Elem()
}

type ActiveActiveSubscriptionPeeringInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionPeeringOutput() ActiveActiveSubscriptionPeeringOutput
	ToActiveActiveSubscriptionPeeringOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringOutput
}

func (*ActiveActiveSubscriptionPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (i *ActiveActiveSubscriptionPeering) ToActiveActiveSubscriptionPeeringOutput() ActiveActiveSubscriptionPeeringOutput {
	return i.ToActiveActiveSubscriptionPeeringOutputWithContext(context.Background())
}

func (i *ActiveActiveSubscriptionPeering) ToActiveActiveSubscriptionPeeringOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionPeeringOutput)
}

// ActiveActiveSubscriptionPeeringArrayInput is an input type that accepts ActiveActiveSubscriptionPeeringArray and ActiveActiveSubscriptionPeeringArrayOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionPeeringArrayInput` via:
//
//	ActiveActiveSubscriptionPeeringArray{ ActiveActiveSubscriptionPeeringArgs{...} }
type ActiveActiveSubscriptionPeeringArrayInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionPeeringArrayOutput() ActiveActiveSubscriptionPeeringArrayOutput
	ToActiveActiveSubscriptionPeeringArrayOutputWithContext(context.Context) ActiveActiveSubscriptionPeeringArrayOutput
}

type ActiveActiveSubscriptionPeeringArray []ActiveActiveSubscriptionPeeringInput

func (ActiveActiveSubscriptionPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (i ActiveActiveSubscriptionPeeringArray) ToActiveActiveSubscriptionPeeringArrayOutput() ActiveActiveSubscriptionPeeringArrayOutput {
	return i.ToActiveActiveSubscriptionPeeringArrayOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionPeeringArray) ToActiveActiveSubscriptionPeeringArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionPeeringArrayOutput)
}

// ActiveActiveSubscriptionPeeringMapInput is an input type that accepts ActiveActiveSubscriptionPeeringMap and ActiveActiveSubscriptionPeeringMapOutput values.
// You can construct a concrete instance of `ActiveActiveSubscriptionPeeringMapInput` via:
//
//	ActiveActiveSubscriptionPeeringMap{ "key": ActiveActiveSubscriptionPeeringArgs{...} }
type ActiveActiveSubscriptionPeeringMapInput interface {
	pulumi.Input

	ToActiveActiveSubscriptionPeeringMapOutput() ActiveActiveSubscriptionPeeringMapOutput
	ToActiveActiveSubscriptionPeeringMapOutputWithContext(context.Context) ActiveActiveSubscriptionPeeringMapOutput
}

type ActiveActiveSubscriptionPeeringMap map[string]ActiveActiveSubscriptionPeeringInput

func (ActiveActiveSubscriptionPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (i ActiveActiveSubscriptionPeeringMap) ToActiveActiveSubscriptionPeeringMapOutput() ActiveActiveSubscriptionPeeringMapOutput {
	return i.ToActiveActiveSubscriptionPeeringMapOutputWithContext(context.Background())
}

func (i ActiveActiveSubscriptionPeeringMap) ToActiveActiveSubscriptionPeeringMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveActiveSubscriptionPeeringMapOutput)
}

type ActiveActiveSubscriptionPeeringOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (o ActiveActiveSubscriptionPeeringOutput) ToActiveActiveSubscriptionPeeringOutput() ActiveActiveSubscriptionPeeringOutput {
	return o
}

func (o ActiveActiveSubscriptionPeeringOutput) ToActiveActiveSubscriptionPeeringOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringOutput {
	return o
}

// AWS account id that the VPC to be peered lives in
func (o ActiveActiveSubscriptionPeeringOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// Identifier of the AWS cloud peering
func (o ActiveActiveSubscriptionPeeringOutput) AwsPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.AwsPeeringId }).(pulumi.StringOutput)
}

// AWS Region that the VPC to be peered lives in
func (o ActiveActiveSubscriptionPeeringOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.DestinationRegion }).(pulumi.StringOutput)
}

// The name of the network to be peered
func (o ActiveActiveSubscriptionPeeringOutput) GcpNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.GcpNetworkName }).(pulumi.StringOutput)
}

// Identifier of the cloud peering
func (o ActiveActiveSubscriptionPeeringOutput) GcpPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.GcpPeeringId }).(pulumi.StringOutput)
}

// GCP project ID that the VPC to be peered lives in
func (o ActiveActiveSubscriptionPeeringOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.GcpProjectId }).(pulumi.StringOutput)
}

// The name of the Redis Enterprise Cloud network to be peered
func (o ActiveActiveSubscriptionPeeringOutput) GcpRedisNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.GcpRedisNetworkName }).(pulumi.StringOutput)
}

// Identifier of the Redis Enterprise Cloud GCP project to be peered
func (o ActiveActiveSubscriptionPeeringOutput) GcpRedisProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.GcpRedisProjectId }).(pulumi.StringOutput)
}

// The cloud provider to use with the vpc peering, (either `AWS` or `GCP`)
func (o ActiveActiveSubscriptionPeeringOutput) ProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringPtrOutput { return v.ProviderName }).(pulumi.StringPtrOutput)
}

// AWS or GCP Region that the VPC to be peered lives in
func (o ActiveActiveSubscriptionPeeringOutput) SourceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.SourceRegion }).(pulumi.StringOutput)
}

// Current status of the account - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`
func (o ActiveActiveSubscriptionPeeringOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A valid subscription predefined in the current account
func (o ActiveActiveSubscriptionPeeringOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// CIDR range of the VPC to be peered
func (o ActiveActiveSubscriptionPeeringOutput) VpcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringPtrOutput { return v.VpcCidr }).(pulumi.StringPtrOutput)
}

// Identifier of the VPC to be peered
func (o ActiveActiveSubscriptionPeeringOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveActiveSubscriptionPeering) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ActiveActiveSubscriptionPeeringArrayOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (o ActiveActiveSubscriptionPeeringArrayOutput) ToActiveActiveSubscriptionPeeringArrayOutput() ActiveActiveSubscriptionPeeringArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionPeeringArrayOutput) ToActiveActiveSubscriptionPeeringArrayOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringArrayOutput {
	return o
}

func (o ActiveActiveSubscriptionPeeringArrayOutput) Index(i pulumi.IntInput) ActiveActiveSubscriptionPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionPeering {
		return vs[0].([]*ActiveActiveSubscriptionPeering)[vs[1].(int)]
	}).(ActiveActiveSubscriptionPeeringOutput)
}

type ActiveActiveSubscriptionPeeringMapOutput struct{ *pulumi.OutputState }

func (ActiveActiveSubscriptionPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveActiveSubscriptionPeering)(nil)).Elem()
}

func (o ActiveActiveSubscriptionPeeringMapOutput) ToActiveActiveSubscriptionPeeringMapOutput() ActiveActiveSubscriptionPeeringMapOutput {
	return o
}

func (o ActiveActiveSubscriptionPeeringMapOutput) ToActiveActiveSubscriptionPeeringMapOutputWithContext(ctx context.Context) ActiveActiveSubscriptionPeeringMapOutput {
	return o
}

func (o ActiveActiveSubscriptionPeeringMapOutput) MapIndex(k pulumi.StringInput) ActiveActiveSubscriptionPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveActiveSubscriptionPeering {
		return vs[0].(map[string]*ActiveActiveSubscriptionPeering)[vs[1].(string)]
	}).(ActiveActiveSubscriptionPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionPeeringInput)(nil)).Elem(), &ActiveActiveSubscriptionPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionPeeringArrayInput)(nil)).Elem(), ActiveActiveSubscriptionPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveActiveSubscriptionPeeringMapInput)(nil)).Elem(), ActiveActiveSubscriptionPeeringMap{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionPeeringOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionPeeringArrayOutput{})
	pulumi.RegisterOutputType(ActiveActiveSubscriptionPeeringMapOutput{})
}
